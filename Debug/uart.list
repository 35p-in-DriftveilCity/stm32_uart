
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004588  08004588  00014588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004788  08004788  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800479c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800479c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008147  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001636  00000000  00000000  000281c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000524  00000000  00000000  00029eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000155fc  00000000  00000000  0002a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008921  00000000  00000000  0003f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085ef1  00000000  00000000  000482f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e8c  00000000  00000000  000ce1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000d0078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004570 	.word	0x08004570

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004570 	.word	0x08004570

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b970 	b.w	8000dcc <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9e08      	ldr	r6, [sp, #32]
 8000b0a:	460d      	mov	r5, r1
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	460f      	mov	r7, r1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d14a      	bne.n	8000baa <__udivmoddi4+0xa6>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4694      	mov	ip, r2
 8000b18:	d965      	bls.n	8000be6 <__udivmoddi4+0xe2>
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	b143      	cbz	r3, 8000b32 <__udivmoddi4+0x2e>
 8000b20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b24:	f1c3 0220 	rsb	r2, r3, #32
 8000b28:	409f      	lsls	r7, r3
 8000b2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	409c      	lsls	r4, r3
 8000b32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b36:	fa1f f58c 	uxth.w	r5, ip
 8000b3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b3e:	0c22      	lsrs	r2, r4, #16
 8000b40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b48:	fb01 f005 	mul.w	r0, r1, r5
 8000b4c:	4290      	cmp	r0, r2
 8000b4e:	d90a      	bls.n	8000b66 <__udivmoddi4+0x62>
 8000b50:	eb1c 0202 	adds.w	r2, ip, r2
 8000b54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b58:	f080 811c 	bcs.w	8000d94 <__udivmoddi4+0x290>
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	f240 8119 	bls.w	8000d94 <__udivmoddi4+0x290>
 8000b62:	3902      	subs	r1, #2
 8000b64:	4462      	add	r2, ip
 8000b66:	1a12      	subs	r2, r2, r0
 8000b68:	b2a4      	uxth	r4, r4
 8000b6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b76:	fb00 f505 	mul.w	r5, r0, r5
 8000b7a:	42a5      	cmp	r5, r4
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x90>
 8000b7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b86:	f080 8107 	bcs.w	8000d98 <__udivmoddi4+0x294>
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	f240 8104 	bls.w	8000d98 <__udivmoddi4+0x294>
 8000b90:	4464      	add	r4, ip
 8000b92:	3802      	subs	r0, #2
 8000b94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	b11e      	cbz	r6, 8000ba6 <__udivmoddi4+0xa2>
 8000b9e:	40dc      	lsrs	r4, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0xbc>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	f000 80ed 	beq.w	8000d8e <__udivmoddi4+0x28a>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc0:	fab3 f183 	clz	r1, r3
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	d149      	bne.n	8000c5c <__udivmoddi4+0x158>
 8000bc8:	42ab      	cmp	r3, r5
 8000bca:	d302      	bcc.n	8000bd2 <__udivmoddi4+0xce>
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	f200 80f8 	bhi.w	8000dc2 <__udivmoddi4+0x2be>
 8000bd2:	1a84      	subs	r4, r0, r2
 8000bd4:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd8:	2001      	movs	r0, #1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d0e2      	beq.n	8000ba6 <__udivmoddi4+0xa2>
 8000be0:	e9c6 4700 	strd	r4, r7, [r6]
 8000be4:	e7df      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000be6:	b902      	cbnz	r2, 8000bea <__udivmoddi4+0xe6>
 8000be8:	deff      	udf	#255	; 0xff
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x210>
 8000bf4:	1a8a      	subs	r2, r1, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c04:	fb07 2015 	mls	r0, r7, r5, r2
 8000c08:	0c22      	lsrs	r2, r4, #16
 8000c0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c0e:	fb0e f005 	mul.w	r0, lr, r5
 8000c12:	4290      	cmp	r0, r2
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x124>
 8000c16:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x122>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2b8>
 8000c26:	4645      	mov	r5, r8
 8000c28:	1a12      	subs	r2, r2, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c30:	fb07 2210 	mls	r2, r7, r0, r2
 8000c34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x14e>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x14c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2c2>
 8000c50:	4610      	mov	r0, r2
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c5a:	e79f      	b.n	8000b9c <__udivmoddi4+0x98>
 8000c5c:	f1c1 0720 	rsb	r7, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c72:	40fd      	lsrs	r5, r7
 8000c74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c78:	4323      	orrs	r3, r4
 8000c7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	fb09 5518 	mls	r5, r9, r8, r5
 8000c86:	0c1c      	lsrs	r4, r3, #16
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	fa02 f201 	lsl.w	r2, r2, r1
 8000c96:	fa00 f001 	lsl.w	r0, r0, r1
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b0>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2b4>
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2b4>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4464      	add	r4, ip
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	b29d      	uxth	r5, r3
 8000cb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1da>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2ac>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2ac>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	4464      	add	r4, ip
 8000cde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ce2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ce6:	eba4 040e 	sub.w	r4, r4, lr
 8000cea:	42ac      	cmp	r4, r5
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46ae      	mov	lr, r5
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x29c>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x298>
 8000cf4:	b156      	cbz	r6, 8000d0c <__udivmoddi4+0x208>
 8000cf6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cfa:	eb64 040e 	sbc.w	r4, r4, lr
 8000cfe:	fa04 f707 	lsl.w	r7, r4, r7
 8000d02:	40ca      	lsrs	r2, r1
 8000d04:	40cc      	lsrs	r4, r1
 8000d06:	4317      	orrs	r7, r2
 8000d08:	e9c6 7400 	strd	r7, r4, [r6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	f1c3 0120 	rsb	r1, r3, #32
 8000d18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d20:	fa25 f101 	lsr.w	r1, r5, r1
 8000d24:	409d      	lsls	r5, r3
 8000d26:	432a      	orrs	r2, r5
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1510 	mls	r5, r7, r0, r1
 8000d38:	0c11      	lsrs	r1, r2, #16
 8000d3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d42:	428d      	cmp	r5, r1
 8000d44:	fa04 f403 	lsl.w	r4, r4, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x258>
 8000d4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b0>
 8000d54:	428d      	cmp	r5, r1
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b0>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1b49      	subs	r1, r1, r5
 8000d5e:	b292      	uxth	r2, r2
 8000d60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d64:	fb07 1115 	mls	r1, r7, r5, r1
 8000d68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d70:	4291      	cmp	r1, r2
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x282>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2a8>
 8000d7e:	4291      	cmp	r1, r2
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2a8>
 8000d82:	3d02      	subs	r5, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a52      	subs	r2, r2, r1
 8000d88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0xfc>
 8000d8e:	4631      	mov	r1, r6
 8000d90:	4630      	mov	r0, r6
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000d94:	4639      	mov	r1, r7
 8000d96:	e6e6      	b.n	8000b66 <__udivmoddi4+0x62>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	e6fb      	b.n	8000b94 <__udivmoddi4+0x90>
 8000d9c:	4548      	cmp	r0, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f0>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da8:	3b01      	subs	r3, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f0>
 8000dac:	4645      	mov	r5, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x282>
 8000db0:	462b      	mov	r3, r5
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1da>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x258>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b0>
 8000dbc:	3d02      	subs	r5, #2
 8000dbe:	4462      	add	r2, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x124>
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	e70a      	b.n	8000bdc <__udivmoddi4+0xd8>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x14e>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init(); //present start point
 8000dd6:	f000 fa99 	bl	800130c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dda:	f000 f8a7 	bl	8000f2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dde:	f000 f939 	bl	8001054 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000de2:	f000 f90d 	bl	8001000 <MX_USART2_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1){
		static int angle =0;
		angle += 1;
 8000de6:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <main+0x148>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a4a      	ldr	r2, [pc, #296]	; (8000f18 <main+0x148>)
 8000dee:	6013      	str	r3, [r2, #0]
		angle %=360;
 8000df0:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <main+0x148>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <main+0x14c>)
 8000df6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfa:	441a      	add	r2, r3
 8000dfc:	1211      	asrs	r1, r2, #8
 8000dfe:	17da      	asrs	r2, r3, #31
 8000e00:	1a8a      	subs	r2, r1, r2
 8000e02:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000e06:	fb01 f202 	mul.w	r2, r1, r2
 8000e0a:	1a9a      	subs	r2, r3, r2
 8000e0c:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <main+0x148>)
 8000e0e:	601a      	str	r2, [r3, #0]
//		int xValue = cos(angle * 3.14 / 180) * 32767; // mul 3.14/180 to change to radian
//		int yValue = sin(angle * 3.14 / 180) * 32767;
//if u want to see -1<cos<1 change int to float but it takes more memory so not recommand
		int16_t xValue = cos(angle * 3.14 / 180) * 32767; // mul 3.14/180 to change to radian
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <main+0x148>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fb31 	bl	800047c <__aeabi_i2d>
 8000e1a:	a33b      	add	r3, pc, #236	; (adr r3, 8000f08 <main+0x138>)
 8000e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e20:	f7ff fb96 	bl	8000550 <__aeabi_dmul>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <main+0x150>)
 8000e32:	f7ff fcb7 	bl	80007a4 <__aeabi_ddiv>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	ec43 2b17 	vmov	d7, r2, r3
 8000e3e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e42:	eef0 0a67 	vmov.f32	s1, s15
 8000e46:	f002 faff 	bl	8003448 <cos>
 8000e4a:	ec51 0b10 	vmov	r0, r1, d0
 8000e4e:	a330      	add	r3, pc, #192	; (adr r3, 8000f10 <main+0x140>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	f7ff fb7c 	bl	8000550 <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff fe10 	bl	8000a84 <__aeabi_d2iz>
 8000e64:	4603      	mov	r3, r0
 8000e66:	81fb      	strh	r3, [r7, #14]
		int16_t yValue = sin(angle * 3.14 / 180) * 32767;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <main+0x148>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fb05 	bl	800047c <__aeabi_i2d>
 8000e72:	a325      	add	r3, pc, #148	; (adr r3, 8000f08 <main+0x138>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fb6a 	bl	8000550 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <main+0x150>)
 8000e8a:	f7ff fc8b 	bl	80007a4 <__aeabi_ddiv>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	ec43 2b17 	vmov	d7, r2, r3
 8000e96:	eeb0 0a47 	vmov.f32	s0, s14
 8000e9a:	eef0 0a67 	vmov.f32	s1, s15
 8000e9e:	f002 fb27 	bl	80034f0 <sin>
 8000ea2:	ec51 0b10 	vmov	r0, r1, d0
 8000ea6:	a31a      	add	r3, pc, #104	; (adr r3, 8000f10 <main+0x140>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff fb50 	bl	8000550 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fde4 	bl	8000a84 <__aeabi_d2iz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	81bb      	strh	r3, [r7, #12]
//i mistake in SerialPlot that input wrong baud rate. correct baud rate is 115200.
		uint8_t txBuffer[6] = {0x11, 0x22,0,0,0,0};
 8000ec0:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <main+0x154>)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec8:	6018      	str	r0, [r3, #0]
 8000eca:	3304      	adds	r3, #4
 8000ecc:	8019      	strh	r1, [r3, #0]
		txBuffer[2] = xValue >> 8;
 8000ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed2:	121b      	asrs	r3, r3, #8
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	71bb      	strb	r3, [r7, #6]
		txBuffer[3] = xValue &0xff;
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	71fb      	strb	r3, [r7, #7]
		txBuffer[4] = yValue >>8;
 8000ee0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ee4:	121b      	asrs	r3, r3, #8
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	723b      	strb	r3, [r7, #8]
		txBuffer[5] = yValue &0xff;
 8000eec:	89bb      	ldrh	r3, [r7, #12]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	727b      	strb	r3, [r7, #9]
		HAL_UART_Transmit(&huart2, txBuffer, 6, 1);
 8000ef2:	1d39      	adds	r1, r7, #4
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2206      	movs	r2, #6
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <main+0x158>)
 8000efa:	f001 fac7 	bl	800248c <HAL_UART_Transmit>
		HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f000 fa76 	bl	80013f0 <HAL_Delay>
	while (1){
 8000f04:	e76f      	b.n	8000de6 <main+0x16>
 8000f06:	bf00      	nop
 8000f08:	51eb851f 	.word	0x51eb851f
 8000f0c:	40091eb8 	.word	0x40091eb8
 8000f10:	00000000 	.word	0x00000000
 8000f14:	40dfffc0 	.word	0x40dfffc0
 8000f18:	20000070 	.word	0x20000070
 8000f1c:	b60b60b7 	.word	0xb60b60b7
 8000f20:	40668000 	.word	0x40668000
 8000f24:	08004588 	.word	0x08004588
 8000f28:	20000028 	.word	0x20000028

08000f2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	; 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fa58 	bl	80033f0 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage
 */
__HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f90:	2310      	movs	r3, #16
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
RCC_OscInitStruct.PLL.PLLM = 16;
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	643b      	str	r3, [r7, #64]	; 0x40
RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fa4:	647b      	str	r3, [r7, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLQ = 4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	64fb      	str	r3, [r7, #76]	; 0x4c
if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fd82 	bl	8001abc <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x96>
	Error_Handler();
 8000fbe:	f000 f8b7 	bl	8001130 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	60fb      	str	r3, [r7, #12]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]

if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK){
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 ffe4 	bl	8001fac <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xc2>
	Error_Handler();
 8000fea:	f000 f8a1 	bl	8001130 <Error_Handler>
}
}
 8000fee:	bf00      	nop
 8000ff0:	3750      	adds	r7, #80	; 0x50
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART2_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
if(HAL_UART_Init(&huart2) != HAL_OK){
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001038:	f001 f9d8 	bl	80023ec <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x46>
	Error_Handler();
 8001042:	f000 f875 	bl	8001130 <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000028 	.word	0x20000028
 8001050:	40004400 	.word	0x40004400

08001054 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <MX_GPIO_Init+0xd0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <MX_GPIO_Init+0xd0>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <MX_GPIO_Init+0xd0>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_GPIO_Init+0xd0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a25      	ldr	r2, [pc, #148]	; (8001124 <MX_GPIO_Init+0xd0>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <MX_GPIO_Init+0xd0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_GPIO_Init+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_GPIO_Init+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2120      	movs	r1, #32
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_GPIO_Init+0xd4>)
 80010e0:	f000 fcd2 	bl	8001a88 <HAL_GPIO_WritePin>

/*Configure GPIO pin : B1_Pin */
GPIO_InitStruct.Pin = B1_Pin;
 80010e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e8:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010ee:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_GPIO_Init+0xd8>)
 80010fc:	f000 fb40 	bl	8001780 <HAL_GPIO_Init>

/*Configure GPIO pin : LD2_Pin */
GPIO_InitStruct.Pin = LD2_Pin;
 8001100:	2320      	movs	r3, #32
 8001102:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_GPIO_Init+0xd4>)
 8001118:	f000 fb32 	bl	8001780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020800 	.word	0x40020800

08001130 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1){
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <HAL_MspInit+0x4c>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x4c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800117a:	2007      	movs	r0, #7
 800117c:	f000 fa2c 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_UART_MspInit+0x94>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d133      	bne.n	8001216 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_UART_MspInit+0x98>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_UART_MspInit+0x98>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_UART_MspInit+0x98>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_UART_MspInit+0x98>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <HAL_UART_MspInit+0x98>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_UART_MspInit+0x98>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011e6:	230c      	movs	r3, #12
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f6:	2307      	movs	r3, #7
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <HAL_UART_MspInit+0x9c>)
 8001202:	f000 fabd 	bl	8001780 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2026      	movs	r0, #38	; 0x26
 800120c:	f000 f9ef 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001210:	2026      	movs	r0, #38	; 0x26
 8001212:	f000 fa08 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004400 	.word	0x40004400
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f89a 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <USART2_IRQHandler+0x10>)
 8001286:	f001 f98d 	bl	80025a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000028 	.word	0x20000028

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f002 f88b 	bl	8003400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fd71 	bl	8000dd0 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012fc:	08004790 	.word	0x08004790
  ldr r2, =_sbss
 8001300:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001304:	20000078 	.word	0x20000078

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_Init+0x40>)
 8001316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_Init+0x40>)
 8001322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_Init+0x40>)
 800132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f94f 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f808 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fefc 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f967 	bl	8001642 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 f92f 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000074 	.word	0x20000074

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000074 	.word	0x20000074

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff feb6 	bl	80013d8 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d008      	beq.n	800168c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e052      	b.n	8001732 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0216 	bic.w	r2, r2, #22
 800169a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <HAL_DMA_Abort+0x62>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0208 	bic.w	r2, r2, #8
 80016ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016dc:	e013      	b.n	8001706 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016de:	f7ff fe7b 	bl	80013d8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d90c      	bls.n	8001706 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2220      	movs	r2, #32
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e015      	b.n	8001732 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e4      	bne.n	80016de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001718:	223f      	movs	r2, #63	; 0x3f
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d004      	beq.n	8001758 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e00c      	b.n	8001772 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2205      	movs	r2, #5
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e159      	b.n	8001a50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 8148 	bne.w	8001a4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d005      	beq.n	80017d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d130      	bne.n	8001834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 0201 	and.w	r2, r3, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b03      	cmp	r3, #3
 800183e:	d017      	beq.n	8001870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	69b9      	ldr	r1, [r7, #24]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a2 	beq.w	8001a4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_GPIO_Init+0x2e8>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a56      	ldr	r2, [pc, #344]	; (8001a68 <HAL_GPIO_Init+0x2e8>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <HAL_GPIO_Init+0x2e8>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001922:	4a52      	ldr	r2, [pc, #328]	; (8001a6c <HAL_GPIO_Init+0x2ec>)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a49      	ldr	r2, [pc, #292]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d019      	beq.n	8001982 <HAL_GPIO_Init+0x202>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a48      	ldr	r2, [pc, #288]	; (8001a74 <HAL_GPIO_Init+0x2f4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0x1fe>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a47      	ldr	r2, [pc, #284]	; (8001a78 <HAL_GPIO_Init+0x2f8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00d      	beq.n	800197a <HAL_GPIO_Init+0x1fa>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a46      	ldr	r2, [pc, #280]	; (8001a7c <HAL_GPIO_Init+0x2fc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <HAL_GPIO_Init+0x1f6>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a45      	ldr	r2, [pc, #276]	; (8001a80 <HAL_GPIO_Init+0x300>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_GPIO_Init+0x1f2>
 800196e:	2304      	movs	r3, #4
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x204>
 8001972:	2307      	movs	r3, #7
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x204>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x204>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x204>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x204>
 8001982:	2300      	movs	r3, #0
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001994:	4935      	ldr	r1, [pc, #212]	; (8001a6c <HAL_GPIO_Init+0x2ec>)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_GPIO_Init+0x304>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a2f      	ldr	r2, [pc, #188]	; (8001a84 <HAL_GPIO_Init+0x304>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_GPIO_Init+0x304>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <HAL_GPIO_Init+0x304>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_GPIO_Init+0x304>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1a:	4a1a      	ldr	r2, [pc, #104]	; (8001a84 <HAL_GPIO_Init+0x304>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_GPIO_Init+0x304>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_GPIO_Init+0x304>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	f67f aea2 	bls.w	800179c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40020c00 	.word	0x40020c00
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e267      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d075      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ada:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d00c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae6:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d112      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af2:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afe:	d10b      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4b7e      	ldr	r3, [pc, #504]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d05b      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x108>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d157      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e242      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_OscConfig+0x74>
 8001b22:	4b76      	ldr	r3, [pc, #472]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a75      	ldr	r2, [pc, #468]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xb0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x98>
 8001b3a:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a6f      	ldr	r2, [pc, #444]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6c      	ldr	r2, [pc, #432]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xb0>
 8001b54:	4b69      	ldr	r3, [pc, #420]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a68      	ldr	r2, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc30 	bl	80013d8 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fc2c 	bl	80013d8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e207      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xc0>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc1c 	bl	80013d8 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fc18 	bl	80013d8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1f3      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xe8>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d063      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d11c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bea:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d116      	bne.n	8001c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x152>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e1c7      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4937      	ldr	r1, [pc, #220]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e03a      	b.n	8001c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7ff fbd1 	bl	80013d8 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fbcd 	bl	80013d8 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1a8      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4925      	ldr	r1, [pc, #148]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e015      	b.n	8001c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_OscConfig+0x244>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff fbb0 	bl	80013d8 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fbac 	bl	80013d8 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e187      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d036      	beq.n	8001d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d016      	beq.n	8001cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_RCC_OscConfig+0x248>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fb90 	bl	80013d8 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb8c 	bl	80013d8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e167      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x240>)
 8001cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x200>
 8001cda:	e01b      	b.n	8001d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_OscConfig+0x248>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fb79 	bl	80013d8 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	e00e      	b.n	8001d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff fb75 	bl	80013d8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d907      	bls.n	8001d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e150      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	42470000 	.word	0x42470000
 8001d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ea      	bne.n	8001cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8097 	beq.w	8001e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b81      	ldr	r3, [pc, #516]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10f      	bne.n	8001d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b7d      	ldr	r3, [pc, #500]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a7c      	ldr	r2, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b7a      	ldr	r3, [pc, #488]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <HAL_RCC_OscConfig+0x474>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <HAL_RCC_OscConfig+0x474>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a73      	ldr	r2, [pc, #460]	; (8001f30 <HAL_RCC_OscConfig+0x474>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fb35 	bl	80013d8 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fb31 	bl	80013d8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e10c      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x474>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2ea>
 8001d98:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a63      	ldr	r2, [pc, #396]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x324>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x30c>
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a5b      	ldr	r2, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0x324>
 8001dc8:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd4:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a54      	ldr	r2, [pc, #336]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001dda:	f023 0304 	bic.w	r3, r3, #4
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d015      	beq.n	8001e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff faf6 	bl	80013d8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7ff faf2 	bl	80013d8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0cb      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e06:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0ee      	beq.n	8001df0 <HAL_RCC_OscConfig+0x334>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e14:	f7ff fae0 	bl	80013d8 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fadc 	bl	80013d8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e0b5      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e32:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ee      	bne.n	8001e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a1 	beq.w	8001f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d05c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d141      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0x478>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fab0 	bl	80013d8 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff faac 	bl	80013d8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e087      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	491b      	ldr	r1, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x478>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fa85 	bl	80013d8 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff fa81 	bl	80013d8 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e05c      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x416>
 8001ef0:	e054      	b.n	8001f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_RCC_OscConfig+0x478>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fa6e 	bl	80013d8 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff fa6a 	bl	80013d8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e045      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x470>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x444>
 8001f1e:	e03d      	b.n	8001f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e038      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000
 8001f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x4ec>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d028      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d121      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d11a      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d111      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	3b01      	subs	r3, #1
 8001f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0cc      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d90c      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0b8      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002000:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4a58      	ldr	r2, [pc, #352]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800200a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b50      	ldr	r3, [pc, #320]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	494d      	ldr	r1, [pc, #308]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d044      	beq.n	80020cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d119      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e07f      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d003      	beq.n	800206a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002066:	2b03      	cmp	r3, #3
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06f      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e067      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 0203 	bic.w	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4934      	ldr	r1, [pc, #208]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800209c:	f7ff f99c 	bl	80013d8 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7ff f998 	bl	80013d8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e04f      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 020c 	and.w	r2, r3, #12
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d1eb      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d20c      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e032      	b.n	800215a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4916      	ldr	r1, [pc, #88]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	490e      	ldr	r1, [pc, #56]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002132:	f000 f821 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8002136:	4602      	mov	r2, r0
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	490a      	ldr	r1, [pc, #40]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	5ccb      	ldrb	r3, [r1, r3]
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f8fc 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023c00 	.word	0x40023c00
 8002168:	40023800 	.word	0x40023800
 800216c:	08004590 	.word	0x08004590
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800217c:	b094      	sub	sp, #80	; 0x50
 800217e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	647b      	str	r3, [r7, #68]	; 0x44
 8002184:	2300      	movs	r3, #0
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002188:	2300      	movs	r3, #0
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002190:	4b79      	ldr	r3, [pc, #484]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d00d      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x40>
 800219c:	2b08      	cmp	r3, #8
 800219e:	f200 80e1 	bhi.w	8002364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x34>
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021aa:	e0db      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ac:	4b73      	ldr	r3, [pc, #460]	; (800237c <HAL_RCC_GetSysClockFreq+0x204>)
 80021ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021b0:	e0db      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b2:	4b73      	ldr	r3, [pc, #460]	; (8002380 <HAL_RCC_GetSysClockFreq+0x208>)
 80021b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b6:	e0d8      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b8:	4b6f      	ldr	r3, [pc, #444]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c2:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ce:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	2200      	movs	r2, #0
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
 80021e2:	2300      	movs	r3, #0
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
 80021e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ea:	4622      	mov	r2, r4
 80021ec:	462b      	mov	r3, r5
 80021ee:	f04f 0000 	mov.w	r0, #0
 80021f2:	f04f 0100 	mov.w	r1, #0
 80021f6:	0159      	lsls	r1, r3, #5
 80021f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021fc:	0150      	lsls	r0, r2, #5
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4621      	mov	r1, r4
 8002204:	1a51      	subs	r1, r2, r1
 8002206:	6139      	str	r1, [r7, #16]
 8002208:	4629      	mov	r1, r5
 800220a:	eb63 0301 	sbc.w	r3, r3, r1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800221c:	4659      	mov	r1, fp
 800221e:	018b      	lsls	r3, r1, #6
 8002220:	4651      	mov	r1, sl
 8002222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002226:	4651      	mov	r1, sl
 8002228:	018a      	lsls	r2, r1, #6
 800222a:	4651      	mov	r1, sl
 800222c:	ebb2 0801 	subs.w	r8, r2, r1
 8002230:	4659      	mov	r1, fp
 8002232:	eb63 0901 	sbc.w	r9, r3, r1
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224a:	4690      	mov	r8, r2
 800224c:	4699      	mov	r9, r3
 800224e:	4623      	mov	r3, r4
 8002250:	eb18 0303 	adds.w	r3, r8, r3
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	462b      	mov	r3, r5
 8002258:	eb49 0303 	adc.w	r3, r9, r3
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800226a:	4629      	mov	r1, r5
 800226c:	024b      	lsls	r3, r1, #9
 800226e:	4621      	mov	r1, r4
 8002270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002274:	4621      	mov	r1, r4
 8002276:	024a      	lsls	r2, r1, #9
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	2200      	movs	r2, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
 8002282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002288:	f7fe fc24 	bl	8000ad4 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002294:	e058      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	2200      	movs	r2, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	4611      	mov	r1, r2
 80022a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022b0:	4642      	mov	r2, r8
 80022b2:	464b      	mov	r3, r9
 80022b4:	f04f 0000 	mov.w	r0, #0
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	0159      	lsls	r1, r3, #5
 80022be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c2:	0150      	lsls	r0, r2, #5
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4641      	mov	r1, r8
 80022ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80022ce:	4649      	mov	r1, r9
 80022d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022e8:	ebb2 040a 	subs.w	r4, r2, sl
 80022ec:	eb63 050b 	sbc.w	r5, r3, fp
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	00eb      	lsls	r3, r5, #3
 80022fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fe:	00e2      	lsls	r2, r4, #3
 8002300:	4614      	mov	r4, r2
 8002302:	461d      	mov	r5, r3
 8002304:	4643      	mov	r3, r8
 8002306:	18e3      	adds	r3, r4, r3
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	464b      	mov	r3, r9
 800230c:	eb45 0303 	adc.w	r3, r5, r3
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800231e:	4629      	mov	r1, r5
 8002320:	028b      	lsls	r3, r1, #10
 8002322:	4621      	mov	r1, r4
 8002324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002328:	4621      	mov	r1, r4
 800232a:	028a      	lsls	r2, r1, #10
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002332:	2200      	movs	r2, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	61fa      	str	r2, [r7, #28]
 8002338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800233c:	f7fe fbca 	bl	8000ad4 <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4613      	mov	r3, r2
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_GetSysClockFreq+0x200>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800235a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002362:	e002      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetSysClockFreq+0x204>)
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800236c:	4618      	mov	r0, r3
 800236e:	3750      	adds	r7, #80	; 0x50
 8002370:	46bd      	mov	sp, r7
 8002372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	00f42400 	.word	0x00f42400
 8002380:	007a1200 	.word	0x007a1200

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023a0:	f7ff fff0 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	080045a0 	.word	0x080045a0

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c8:	f7ff ffdc 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0b5b      	lsrs	r3, r3, #13
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	080045a0 	.word	0x080045a0

080023ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e042      	b.n	8002484 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe feba 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fd69 	bl	8002f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d175      	bne.n	8002598 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_UART_Transmit+0x2c>
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e06e      	b.n	800259a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	; 0x21
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ca:	f7fe ff85 	bl	80013d8 <HAL_GetTick>
 80024ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d108      	bne.n	80024f8 <HAL_UART_Transmit+0x6c>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	e003      	b.n	8002500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002500:	e02e      	b.n	8002560 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fb05 	bl	8002b1c <UART_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e03a      	b.n	800259a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10b      	bne.n	8002542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3302      	adds	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e007      	b.n	8002552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3301      	adds	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1cb      	bne.n	8002502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fad1 	bl	8002b1c <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e006      	b.n	800259a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b0ba      	sub	sp, #232	; 0xe8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_UART_IRQHandler+0x66>
 80025f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fbc2 	bl	8002d8c <UART_Receive_IT>
      return;
 8002608:	e25b      	b.n	8002ac2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800260a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 80de 	beq.w	80027d0 <HAL_UART_IRQHandler+0x22c>
 8002614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002624:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80d1 	beq.w	80027d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_UART_IRQHandler+0xae>
 800263a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_UART_IRQHandler+0xd2>
 800265e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f043 0202 	orr.w	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_UART_IRQHandler+0xf6>
 8002682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f043 0204 	orr.w	r2, r3, #4
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d011      	beq.n	80026ca <HAL_UART_IRQHandler+0x126>
 80026a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f043 0208 	orr.w	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 81f2 	beq.w	8002ab8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_UART_IRQHandler+0x14e>
 80026e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fb4d 	bl	8002d8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <HAL_UART_IRQHandler+0x17a>
 8002716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d04f      	beq.n	80027be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fa55 	bl	8002bce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d141      	bne.n	80027b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3314      	adds	r3, #20
 8002738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800274c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3314      	adds	r3, #20
 800275a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800275e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800276a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1d9      	bne.n	8002732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d013      	beq.n	80027ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	4a7e      	ldr	r2, [pc, #504]	; (8002984 <HAL_UART_IRQHandler+0x3e0>)
 800278c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe ffd1 	bl	800173a <HAL_DMA_Abort_IT>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027a8:	4610      	mov	r0, r2
 80027aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	e00e      	b.n	80027cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f99e 	bl	8002af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b4:	e00a      	b.n	80027cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f99a 	bl	8002af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	e006      	b.n	80027cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f996 	bl	8002af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80027ca:	e175      	b.n	8002ab8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027cc:	bf00      	nop
    return;
 80027ce:	e173      	b.n	8002ab8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	f040 814f 	bne.w	8002a78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8148 	beq.w	8002a78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8141 	beq.w	8002a78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	f040 80b6 	bne.w	8002988 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8145 	beq.w	8002abc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800283a:	429a      	cmp	r2, r3
 800283c:	f080 813e 	bcs.w	8002abc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002852:	f000 8088 	beq.w	8002966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002864:	e853 3f00 	ldrex	r3, [r3]
 8002868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800286c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800288e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002892:	e841 2300 	strex	r3, r2, [r1]
 8002896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800289a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1d9      	bne.n	8002856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3314      	adds	r3, #20
 80028c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e1      	bne.n	80028a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3314      	adds	r3, #20
 80028e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3314      	adds	r3, #20
 80028fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800290a:	e841 2300 	strex	r3, r2, [r1]
 800290e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1e3      	bne.n	80028de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292e:	e853 3f00 	ldrex	r3, [r3]
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002936:	f023 0310 	bic.w	r3, r3, #16
 800293a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	330c      	adds	r3, #12
 8002944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002948:	65ba      	str	r2, [r7, #88]	; 0x58
 800294a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800294e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002950:	e841 2300 	strex	r3, r2, [r1]
 8002954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e3      	bne.n	8002924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fe7a 	bl	800165a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002974:	b29b      	uxth	r3, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b29b      	uxth	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8c1 	bl	8002b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002982:	e09b      	b.n	8002abc <HAL_UART_IRQHandler+0x518>
 8002984:	08002c95 	.word	0x08002c95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002990:	b29b      	uxth	r3, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 808e 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80029a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8089 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029d2:	647a      	str	r2, [r7, #68]	; 0x44
 80029d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e3      	bne.n	80029ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3314      	adds	r3, #20
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	e853 3f00 	ldrex	r3, [r3]
 80029f4:	623b      	str	r3, [r7, #32]
   return(result);
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3314      	adds	r3, #20
 8002a06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a0a:	633a      	str	r2, [r7, #48]	; 0x30
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a12:	e841 2300 	strex	r3, r2, [r1]
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1e3      	bne.n	80029e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	330c      	adds	r3, #12
 8002a4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a50:	61fa      	str	r2, [r7, #28]
 8002a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a54:	69b9      	ldr	r1, [r7, #24]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	e841 2300 	strex	r3, r2, [r1]
 8002a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e3      	bne.n	8002a2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f847 	bl	8002b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a76:	e023      	b.n	8002ac0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_UART_IRQHandler+0x4f4>
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f913 	bl	8002cbc <UART_Transmit_IT>
    return;
 8002a96:	e014      	b.n	8002ac2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x51e>
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f953 	bl	8002d5c <UART_EndTransmit_IT>
    return;
 8002ab6:	e004      	b.n	8002ac2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002ab8:	bf00      	nop
 8002aba:	e002      	b.n	8002ac2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ac0:	bf00      	nop
  }
}
 8002ac2:	37e8      	adds	r7, #232	; 0xe8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2c:	e03b      	b.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d037      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7fe fc4f 	bl	80013d8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e03a      	b.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d023      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b80      	cmp	r3, #128	; 0x80
 8002b62:	d020      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d01d      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d116      	bne.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f81d 	bl	8002bce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2208      	movs	r2, #8
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d0b4      	beq.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b095      	sub	sp, #84	; 0x54
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf6:	643a      	str	r2, [r7, #64]	; 0x40
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e5      	bne.n	8002bd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3314      	adds	r3, #20
 8002c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	e853 3f00 	ldrex	r3, [r3]
 8002c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3314      	adds	r3, #20
 8002c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c32:	e841 2300 	strex	r3, r2, [r1]
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e5      	bne.n	8002c0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d119      	bne.n	8002c7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f023 0310 	bic.w	r3, r3, #16
 8002c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c66:	61ba      	str	r2, [r7, #24]
 8002c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	e841 2300 	strex	r3, r2, [r1]
 8002c72:	613b      	str	r3, [r7, #16]
   return(result);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1e5      	bne.n	8002c46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c88:	bf00      	nop
 8002c8a:	3754      	adds	r7, #84	; 0x54
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ff1e 	bl	8002af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b21      	cmp	r3, #33	; 0x21
 8002cce:	d13e      	bne.n	8002d4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd8:	d114      	bne.n	8002d04 <UART_Transmit_IT+0x48>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d110      	bne.n	8002d04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	1c9a      	adds	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	621a      	str	r2, [r3, #32]
 8002d02:	e008      	b.n	8002d16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	1c59      	adds	r1, r3, #1
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6211      	str	r1, [r2, #32]
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4619      	mov	r1, r3
 8002d24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
  }
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fea3 	bl	8002ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b22      	cmp	r3, #34	; 0x22
 8002d9e:	f040 80ae 	bne.w	8002efe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	d117      	bne.n	8002ddc <UART_Receive_IT+0x50>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d113      	bne.n	8002ddc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
 8002dda:	e026      	b.n	8002e2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dee:	d007      	beq.n	8002e00 <UART_Receive_IT+0x74>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <UART_Receive_IT+0x82>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e008      	b.n	8002e20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4619      	mov	r1, r3
 8002e38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d15d      	bne.n	8002efa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0220 	bic.w	r2, r2, #32
 8002e4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d135      	bne.n	8002ef0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	613b      	str	r3, [r7, #16]
   return(result);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f023 0310 	bic.w	r3, r3, #16
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	623a      	str	r2, [r7, #32]
 8002eac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	69f9      	ldr	r1, [r7, #28]
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e5      	bne.n	8002e8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d10a      	bne.n	8002ee2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fe0b 	bl	8002b04 <HAL_UARTEx_RxEventCallback>
 8002eee:	e002      	b.n	8002ef6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fdf3 	bl	8002adc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e002      	b.n	8002f00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3730      	adds	r7, #48	; 0x30
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	b0c0      	sub	sp, #256	; 0x100
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	68d9      	ldr	r1, [r3, #12]
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	ea40 0301 	orr.w	r3, r0, r1
 8002f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f60:	f021 010c 	bic.w	r1, r1, #12
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f82:	6999      	ldr	r1, [r3, #24]
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	ea40 0301 	orr.w	r3, r0, r1
 8002f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b8f      	ldr	r3, [pc, #572]	; (80031d4 <UART_SetConfig+0x2cc>)
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d005      	beq.n	8002fa8 <UART_SetConfig+0xa0>
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b8d      	ldr	r3, [pc, #564]	; (80031d8 <UART_SetConfig+0x2d0>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d104      	bne.n	8002fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7ff fa0c 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8002fac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fb0:	e003      	b.n	8002fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fb2:	f7ff f9f3 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8002fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc4:	f040 810c 	bne.w	80031e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	1891      	adds	r1, r2, r2
 8002fe0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fe2:	415b      	adcs	r3, r3
 8002fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fea:	4621      	mov	r1, r4
 8002fec:	eb12 0801 	adds.w	r8, r2, r1
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	eb43 0901 	adc.w	r9, r3, r1
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300a:	4690      	mov	r8, r2
 800300c:	4699      	mov	r9, r3
 800300e:	4623      	mov	r3, r4
 8003010:	eb18 0303 	adds.w	r3, r8, r3
 8003014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003018:	462b      	mov	r3, r5
 800301a:	eb49 0303 	adc.w	r3, r9, r3
 800301e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800302e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003036:	460b      	mov	r3, r1
 8003038:	18db      	adds	r3, r3, r3
 800303a:	653b      	str	r3, [r7, #80]	; 0x50
 800303c:	4613      	mov	r3, r2
 800303e:	eb42 0303 	adc.w	r3, r2, r3
 8003042:	657b      	str	r3, [r7, #84]	; 0x54
 8003044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800304c:	f7fd fd42 	bl	8000ad4 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4b61      	ldr	r3, [pc, #388]	; (80031dc <UART_SetConfig+0x2d4>)
 8003056:	fba3 2302 	umull	r2, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	011c      	lsls	r4, r3, #4
 800305e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003062:	2200      	movs	r2, #0
 8003064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003068:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800306c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003070:	4642      	mov	r2, r8
 8003072:	464b      	mov	r3, r9
 8003074:	1891      	adds	r1, r2, r2
 8003076:	64b9      	str	r1, [r7, #72]	; 0x48
 8003078:	415b      	adcs	r3, r3
 800307a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800307c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003080:	4641      	mov	r1, r8
 8003082:	eb12 0a01 	adds.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb43 0b01 	adc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800309c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a0:	4692      	mov	sl, r2
 80030a2:	469b      	mov	fp, r3
 80030a4:	4643      	mov	r3, r8
 80030a6:	eb1a 0303 	adds.w	r3, sl, r3
 80030aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030ae:	464b      	mov	r3, r9
 80030b0:	eb4b 0303 	adc.w	r3, fp, r3
 80030b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030cc:	460b      	mov	r3, r1
 80030ce:	18db      	adds	r3, r3, r3
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40
 80030d2:	4613      	mov	r3, r2
 80030d4:	eb42 0303 	adc.w	r3, r2, r3
 80030d8:	647b      	str	r3, [r7, #68]	; 0x44
 80030da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030e2:	f7fd fcf7 	bl	8000ad4 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <UART_SetConfig+0x2d4>)
 80030ee:	fba3 2301 	umull	r2, r3, r3, r1
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2264      	movs	r2, #100	; 0x64
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	1acb      	subs	r3, r1, r3
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <UART_SetConfig+0x2d4>)
 8003104:	fba3 2302 	umull	r2, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003110:	441c      	add	r4, r3
 8003112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800311c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	1891      	adds	r1, r2, r2
 800312a:	63b9      	str	r1, [r7, #56]	; 0x38
 800312c:	415b      	adcs	r3, r3
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003134:	4641      	mov	r1, r8
 8003136:	1851      	adds	r1, r2, r1
 8003138:	6339      	str	r1, [r7, #48]	; 0x30
 800313a:	4649      	mov	r1, r9
 800313c:	414b      	adcs	r3, r1
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800314c:	4659      	mov	r1, fp
 800314e:	00cb      	lsls	r3, r1, #3
 8003150:	4651      	mov	r1, sl
 8003152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003156:	4651      	mov	r1, sl
 8003158:	00ca      	lsls	r2, r1, #3
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	4603      	mov	r3, r0
 8003160:	4642      	mov	r2, r8
 8003162:	189b      	adds	r3, r3, r2
 8003164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003168:	464b      	mov	r3, r9
 800316a:	460a      	mov	r2, r1
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003180:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003188:	460b      	mov	r3, r1
 800318a:	18db      	adds	r3, r3, r3
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
 800318e:	4613      	mov	r3, r2
 8003190:	eb42 0303 	adc.w	r3, r2, r3
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800319a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800319e:	f7fd fc99 	bl	8000ad4 <__aeabi_uldivmod>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <UART_SetConfig+0x2d4>)
 80031a8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	2164      	movs	r1, #100	; 0x64
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	3332      	adds	r3, #50	; 0x32
 80031ba:	4a08      	ldr	r2, [pc, #32]	; (80031dc <UART_SetConfig+0x2d4>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	f003 0207 	and.w	r2, r3, #7
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4422      	add	r2, r4
 80031ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031d0:	e106      	b.n	80033e0 <UART_SetConfig+0x4d8>
 80031d2:	bf00      	nop
 80031d4:	40011000 	.word	0x40011000
 80031d8:	40011400 	.word	0x40011400
 80031dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031f2:	4642      	mov	r2, r8
 80031f4:	464b      	mov	r3, r9
 80031f6:	1891      	adds	r1, r2, r2
 80031f8:	6239      	str	r1, [r7, #32]
 80031fa:	415b      	adcs	r3, r3
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003202:	4641      	mov	r1, r8
 8003204:	1854      	adds	r4, r2, r1
 8003206:	4649      	mov	r1, r9
 8003208:	eb43 0501 	adc.w	r5, r3, r1
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	00eb      	lsls	r3, r5, #3
 8003216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800321a:	00e2      	lsls	r2, r4, #3
 800321c:	4614      	mov	r4, r2
 800321e:	461d      	mov	r5, r3
 8003220:	4643      	mov	r3, r8
 8003222:	18e3      	adds	r3, r4, r3
 8003224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003228:	464b      	mov	r3, r9
 800322a:	eb45 0303 	adc.w	r3, r5, r3
 800322e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800323e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800324e:	4629      	mov	r1, r5
 8003250:	008b      	lsls	r3, r1, #2
 8003252:	4621      	mov	r1, r4
 8003254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003258:	4621      	mov	r1, r4
 800325a:	008a      	lsls	r2, r1, #2
 800325c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003260:	f7fd fc38 	bl	8000ad4 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4b60      	ldr	r3, [pc, #384]	; (80033ec <UART_SetConfig+0x4e4>)
 800326a:	fba3 2302 	umull	r2, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	011c      	lsls	r4, r3, #4
 8003272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800327c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003284:	4642      	mov	r2, r8
 8003286:	464b      	mov	r3, r9
 8003288:	1891      	adds	r1, r2, r2
 800328a:	61b9      	str	r1, [r7, #24]
 800328c:	415b      	adcs	r3, r3
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003294:	4641      	mov	r1, r8
 8003296:	1851      	adds	r1, r2, r1
 8003298:	6139      	str	r1, [r7, #16]
 800329a:	4649      	mov	r1, r9
 800329c:	414b      	adcs	r3, r1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032ac:	4659      	mov	r1, fp
 80032ae:	00cb      	lsls	r3, r1, #3
 80032b0:	4651      	mov	r1, sl
 80032b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b6:	4651      	mov	r1, sl
 80032b8:	00ca      	lsls	r2, r1, #3
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	4642      	mov	r2, r8
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032c8:	464b      	mov	r3, r9
 80032ca:	460a      	mov	r2, r1
 80032cc:	eb42 0303 	adc.w	r3, r2, r3
 80032d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80032de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032ec:	4649      	mov	r1, r9
 80032ee:	008b      	lsls	r3, r1, #2
 80032f0:	4641      	mov	r1, r8
 80032f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f6:	4641      	mov	r1, r8
 80032f8:	008a      	lsls	r2, r1, #2
 80032fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032fe:	f7fd fbe9 	bl	8000ad4 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4611      	mov	r1, r2
 8003308:	4b38      	ldr	r3, [pc, #224]	; (80033ec <UART_SetConfig+0x4e4>)
 800330a:	fba3 2301 	umull	r2, r3, r3, r1
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2264      	movs	r2, #100	; 0x64
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	1acb      	subs	r3, r1, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	; 0x32
 800331c:	4a33      	ldr	r2, [pc, #204]	; (80033ec <UART_SetConfig+0x4e4>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003328:	441c      	add	r4, r3
 800332a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800332e:	2200      	movs	r2, #0
 8003330:	673b      	str	r3, [r7, #112]	; 0x70
 8003332:	677a      	str	r2, [r7, #116]	; 0x74
 8003334:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	415b      	adcs	r3, r3
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003348:	4641      	mov	r1, r8
 800334a:	1851      	adds	r1, r2, r1
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	4649      	mov	r1, r9
 8003350:	414b      	adcs	r3, r1
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003360:	4659      	mov	r1, fp
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4651      	mov	r1, sl
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4642      	mov	r2, r8
 8003376:	189b      	adds	r3, r3, r2
 8003378:	66bb      	str	r3, [r7, #104]	; 0x68
 800337a:	464b      	mov	r3, r9
 800337c:	460a      	mov	r2, r1
 800337e:	eb42 0303 	adc.w	r3, r2, r3
 8003382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	663b      	str	r3, [r7, #96]	; 0x60
 800338e:	667a      	str	r2, [r7, #100]	; 0x64
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800339c:	4649      	mov	r1, r9
 800339e:	008b      	lsls	r3, r1, #2
 80033a0:	4641      	mov	r1, r8
 80033a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a6:	4641      	mov	r1, r8
 80033a8:	008a      	lsls	r2, r1, #2
 80033aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033ae:	f7fd fb91 	bl	8000ad4 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <UART_SetConfig+0x4e4>)
 80033b8:	fba3 1302 	umull	r1, r3, r3, r2
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	2164      	movs	r1, #100	; 0x64
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	3332      	adds	r3, #50	; 0x32
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <UART_SetConfig+0x4e4>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4422      	add	r2, r4
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033e6:	46bd      	mov	sp, r7
 80033e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ec:	51eb851f 	.word	0x51eb851f

080033f0 <memset>:
 80033f0:	4402      	add	r2, r0
 80033f2:	4603      	mov	r3, r0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	f803 1b01 	strb.w	r1, [r3], #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <__libc_init_array>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	4d0d      	ldr	r5, [pc, #52]	; (8003438 <__libc_init_array+0x38>)
 8003404:	4c0d      	ldr	r4, [pc, #52]	; (800343c <__libc_init_array+0x3c>)
 8003406:	1b64      	subs	r4, r4, r5
 8003408:	10a4      	asrs	r4, r4, #2
 800340a:	2600      	movs	r6, #0
 800340c:	42a6      	cmp	r6, r4
 800340e:	d109      	bne.n	8003424 <__libc_init_array+0x24>
 8003410:	4d0b      	ldr	r5, [pc, #44]	; (8003440 <__libc_init_array+0x40>)
 8003412:	4c0c      	ldr	r4, [pc, #48]	; (8003444 <__libc_init_array+0x44>)
 8003414:	f001 f8ac 	bl	8004570 <_init>
 8003418:	1b64      	subs	r4, r4, r5
 800341a:	10a4      	asrs	r4, r4, #2
 800341c:	2600      	movs	r6, #0
 800341e:	42a6      	cmp	r6, r4
 8003420:	d105      	bne.n	800342e <__libc_init_array+0x2e>
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	f855 3b04 	ldr.w	r3, [r5], #4
 8003428:	4798      	blx	r3
 800342a:	3601      	adds	r6, #1
 800342c:	e7ee      	b.n	800340c <__libc_init_array+0xc>
 800342e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003432:	4798      	blx	r3
 8003434:	3601      	adds	r6, #1
 8003436:	e7f2      	b.n	800341e <__libc_init_array+0x1e>
 8003438:	08004788 	.word	0x08004788
 800343c:	08004788 	.word	0x08004788
 8003440:	08004788 	.word	0x08004788
 8003444:	0800478c 	.word	0x0800478c

08003448 <cos>:
 8003448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800344a:	ec53 2b10 	vmov	r2, r3, d0
 800344e:	4826      	ldr	r0, [pc, #152]	; (80034e8 <cos+0xa0>)
 8003450:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003454:	4281      	cmp	r1, r0
 8003456:	dc06      	bgt.n	8003466 <cos+0x1e>
 8003458:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80034e0 <cos+0x98>
 800345c:	b005      	add	sp, #20
 800345e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003462:	f000 b89d 	b.w	80035a0 <__kernel_cos>
 8003466:	4821      	ldr	r0, [pc, #132]	; (80034ec <cos+0xa4>)
 8003468:	4281      	cmp	r1, r0
 800346a:	dd09      	ble.n	8003480 <cos+0x38>
 800346c:	ee10 0a10 	vmov	r0, s0
 8003470:	4619      	mov	r1, r3
 8003472:	f7fc feb5 	bl	80001e0 <__aeabi_dsub>
 8003476:	ec41 0b10 	vmov	d0, r0, r1
 800347a:	b005      	add	sp, #20
 800347c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003480:	4668      	mov	r0, sp
 8003482:	f000 fa15 	bl	80038b0 <__ieee754_rem_pio2>
 8003486:	f000 0003 	and.w	r0, r0, #3
 800348a:	2801      	cmp	r0, #1
 800348c:	d00b      	beq.n	80034a6 <cos+0x5e>
 800348e:	2802      	cmp	r0, #2
 8003490:	d016      	beq.n	80034c0 <cos+0x78>
 8003492:	b9e0      	cbnz	r0, 80034ce <cos+0x86>
 8003494:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003498:	ed9d 0b00 	vldr	d0, [sp]
 800349c:	f000 f880 	bl	80035a0 <__kernel_cos>
 80034a0:	ec51 0b10 	vmov	r0, r1, d0
 80034a4:	e7e7      	b.n	8003476 <cos+0x2e>
 80034a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034aa:	ed9d 0b00 	vldr	d0, [sp]
 80034ae:	f000 f93f 	bl	8003730 <__kernel_sin>
 80034b2:	ec53 2b10 	vmov	r2, r3, d0
 80034b6:	ee10 0a10 	vmov	r0, s0
 80034ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80034be:	e7da      	b.n	8003476 <cos+0x2e>
 80034c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034c4:	ed9d 0b00 	vldr	d0, [sp]
 80034c8:	f000 f86a 	bl	80035a0 <__kernel_cos>
 80034cc:	e7f1      	b.n	80034b2 <cos+0x6a>
 80034ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034d2:	ed9d 0b00 	vldr	d0, [sp]
 80034d6:	2001      	movs	r0, #1
 80034d8:	f000 f92a 	bl	8003730 <__kernel_sin>
 80034dc:	e7e0      	b.n	80034a0 <cos+0x58>
 80034de:	bf00      	nop
	...
 80034e8:	3fe921fb 	.word	0x3fe921fb
 80034ec:	7fefffff 	.word	0x7fefffff

080034f0 <sin>:
 80034f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034f2:	ec53 2b10 	vmov	r2, r3, d0
 80034f6:	4828      	ldr	r0, [pc, #160]	; (8003598 <sin+0xa8>)
 80034f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80034fc:	4281      	cmp	r1, r0
 80034fe:	dc07      	bgt.n	8003510 <sin+0x20>
 8003500:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003590 <sin+0xa0>
 8003504:	2000      	movs	r0, #0
 8003506:	b005      	add	sp, #20
 8003508:	f85d eb04 	ldr.w	lr, [sp], #4
 800350c:	f000 b910 	b.w	8003730 <__kernel_sin>
 8003510:	4822      	ldr	r0, [pc, #136]	; (800359c <sin+0xac>)
 8003512:	4281      	cmp	r1, r0
 8003514:	dd09      	ble.n	800352a <sin+0x3a>
 8003516:	ee10 0a10 	vmov	r0, s0
 800351a:	4619      	mov	r1, r3
 800351c:	f7fc fe60 	bl	80001e0 <__aeabi_dsub>
 8003520:	ec41 0b10 	vmov	d0, r0, r1
 8003524:	b005      	add	sp, #20
 8003526:	f85d fb04 	ldr.w	pc, [sp], #4
 800352a:	4668      	mov	r0, sp
 800352c:	f000 f9c0 	bl	80038b0 <__ieee754_rem_pio2>
 8003530:	f000 0003 	and.w	r0, r0, #3
 8003534:	2801      	cmp	r0, #1
 8003536:	d00c      	beq.n	8003552 <sin+0x62>
 8003538:	2802      	cmp	r0, #2
 800353a:	d011      	beq.n	8003560 <sin+0x70>
 800353c:	b9f0      	cbnz	r0, 800357c <sin+0x8c>
 800353e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003542:	ed9d 0b00 	vldr	d0, [sp]
 8003546:	2001      	movs	r0, #1
 8003548:	f000 f8f2 	bl	8003730 <__kernel_sin>
 800354c:	ec51 0b10 	vmov	r0, r1, d0
 8003550:	e7e6      	b.n	8003520 <sin+0x30>
 8003552:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003556:	ed9d 0b00 	vldr	d0, [sp]
 800355a:	f000 f821 	bl	80035a0 <__kernel_cos>
 800355e:	e7f5      	b.n	800354c <sin+0x5c>
 8003560:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003564:	ed9d 0b00 	vldr	d0, [sp]
 8003568:	2001      	movs	r0, #1
 800356a:	f000 f8e1 	bl	8003730 <__kernel_sin>
 800356e:	ec53 2b10 	vmov	r2, r3, d0
 8003572:	ee10 0a10 	vmov	r0, s0
 8003576:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800357a:	e7d1      	b.n	8003520 <sin+0x30>
 800357c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003580:	ed9d 0b00 	vldr	d0, [sp]
 8003584:	f000 f80c 	bl	80035a0 <__kernel_cos>
 8003588:	e7f1      	b.n	800356e <sin+0x7e>
 800358a:	bf00      	nop
 800358c:	f3af 8000 	nop.w
	...
 8003598:	3fe921fb 	.word	0x3fe921fb
 800359c:	7fefffff 	.word	0x7fefffff

080035a0 <__kernel_cos>:
 80035a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a4:	ec57 6b10 	vmov	r6, r7, d0
 80035a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80035ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80035b0:	ed8d 1b00 	vstr	d1, [sp]
 80035b4:	da07      	bge.n	80035c6 <__kernel_cos+0x26>
 80035b6:	ee10 0a10 	vmov	r0, s0
 80035ba:	4639      	mov	r1, r7
 80035bc:	f7fd fa62 	bl	8000a84 <__aeabi_d2iz>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	f000 8088 	beq.w	80036d6 <__kernel_cos+0x136>
 80035c6:	4632      	mov	r2, r6
 80035c8:	463b      	mov	r3, r7
 80035ca:	4630      	mov	r0, r6
 80035cc:	4639      	mov	r1, r7
 80035ce:	f7fc ffbf 	bl	8000550 <__aeabi_dmul>
 80035d2:	4b51      	ldr	r3, [pc, #324]	; (8003718 <__kernel_cos+0x178>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	4604      	mov	r4, r0
 80035d8:	460d      	mov	r5, r1
 80035da:	f7fc ffb9 	bl	8000550 <__aeabi_dmul>
 80035de:	a340      	add	r3, pc, #256	; (adr r3, 80036e0 <__kernel_cos+0x140>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	4682      	mov	sl, r0
 80035e6:	468b      	mov	fp, r1
 80035e8:	4620      	mov	r0, r4
 80035ea:	4629      	mov	r1, r5
 80035ec:	f7fc ffb0 	bl	8000550 <__aeabi_dmul>
 80035f0:	a33d      	add	r3, pc, #244	; (adr r3, 80036e8 <__kernel_cos+0x148>)
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f7fc fdf5 	bl	80001e4 <__adddf3>
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	f7fc ffa7 	bl	8000550 <__aeabi_dmul>
 8003602:	a33b      	add	r3, pc, #236	; (adr r3, 80036f0 <__kernel_cos+0x150>)
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f7fc fdea 	bl	80001e0 <__aeabi_dsub>
 800360c:	4622      	mov	r2, r4
 800360e:	462b      	mov	r3, r5
 8003610:	f7fc ff9e 	bl	8000550 <__aeabi_dmul>
 8003614:	a338      	add	r3, pc, #224	; (adr r3, 80036f8 <__kernel_cos+0x158>)
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	f7fc fde3 	bl	80001e4 <__adddf3>
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	f7fc ff95 	bl	8000550 <__aeabi_dmul>
 8003626:	a336      	add	r3, pc, #216	; (adr r3, 8003700 <__kernel_cos+0x160>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f7fc fdd8 	bl	80001e0 <__aeabi_dsub>
 8003630:	4622      	mov	r2, r4
 8003632:	462b      	mov	r3, r5
 8003634:	f7fc ff8c 	bl	8000550 <__aeabi_dmul>
 8003638:	a333      	add	r3, pc, #204	; (adr r3, 8003708 <__kernel_cos+0x168>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fc fdd1 	bl	80001e4 <__adddf3>
 8003642:	4622      	mov	r2, r4
 8003644:	462b      	mov	r3, r5
 8003646:	f7fc ff83 	bl	8000550 <__aeabi_dmul>
 800364a:	4622      	mov	r2, r4
 800364c:	462b      	mov	r3, r5
 800364e:	f7fc ff7f 	bl	8000550 <__aeabi_dmul>
 8003652:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003656:	4604      	mov	r4, r0
 8003658:	460d      	mov	r5, r1
 800365a:	4630      	mov	r0, r6
 800365c:	4639      	mov	r1, r7
 800365e:	f7fc ff77 	bl	8000550 <__aeabi_dmul>
 8003662:	460b      	mov	r3, r1
 8003664:	4602      	mov	r2, r0
 8003666:	4629      	mov	r1, r5
 8003668:	4620      	mov	r0, r4
 800366a:	f7fc fdb9 	bl	80001e0 <__aeabi_dsub>
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <__kernel_cos+0x17c>)
 8003670:	4598      	cmp	r8, r3
 8003672:	4606      	mov	r6, r0
 8003674:	460f      	mov	r7, r1
 8003676:	dc10      	bgt.n	800369a <__kernel_cos+0xfa>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4650      	mov	r0, sl
 800367e:	4659      	mov	r1, fp
 8003680:	f7fc fdae 	bl	80001e0 <__aeabi_dsub>
 8003684:	460b      	mov	r3, r1
 8003686:	4926      	ldr	r1, [pc, #152]	; (8003720 <__kernel_cos+0x180>)
 8003688:	4602      	mov	r2, r0
 800368a:	2000      	movs	r0, #0
 800368c:	f7fc fda8 	bl	80001e0 <__aeabi_dsub>
 8003690:	ec41 0b10 	vmov	d0, r0, r1
 8003694:	b003      	add	sp, #12
 8003696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <__kernel_cos+0x184>)
 800369c:	4920      	ldr	r1, [pc, #128]	; (8003720 <__kernel_cos+0x180>)
 800369e:	4598      	cmp	r8, r3
 80036a0:	bfcc      	ite	gt
 80036a2:	4d21      	ldrgt	r5, [pc, #132]	; (8003728 <__kernel_cos+0x188>)
 80036a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80036a8:	2400      	movs	r4, #0
 80036aa:	4622      	mov	r2, r4
 80036ac:	462b      	mov	r3, r5
 80036ae:	2000      	movs	r0, #0
 80036b0:	f7fc fd96 	bl	80001e0 <__aeabi_dsub>
 80036b4:	4622      	mov	r2, r4
 80036b6:	4680      	mov	r8, r0
 80036b8:	4689      	mov	r9, r1
 80036ba:	462b      	mov	r3, r5
 80036bc:	4650      	mov	r0, sl
 80036be:	4659      	mov	r1, fp
 80036c0:	f7fc fd8e 	bl	80001e0 <__aeabi_dsub>
 80036c4:	4632      	mov	r2, r6
 80036c6:	463b      	mov	r3, r7
 80036c8:	f7fc fd8a 	bl	80001e0 <__aeabi_dsub>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4640      	mov	r0, r8
 80036d2:	4649      	mov	r1, r9
 80036d4:	e7da      	b.n	800368c <__kernel_cos+0xec>
 80036d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003710 <__kernel_cos+0x170>
 80036da:	e7db      	b.n	8003694 <__kernel_cos+0xf4>
 80036dc:	f3af 8000 	nop.w
 80036e0:	be8838d4 	.word	0xbe8838d4
 80036e4:	bda8fae9 	.word	0xbda8fae9
 80036e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80036ec:	3e21ee9e 	.word	0x3e21ee9e
 80036f0:	809c52ad 	.word	0x809c52ad
 80036f4:	3e927e4f 	.word	0x3e927e4f
 80036f8:	19cb1590 	.word	0x19cb1590
 80036fc:	3efa01a0 	.word	0x3efa01a0
 8003700:	16c15177 	.word	0x16c15177
 8003704:	3f56c16c 	.word	0x3f56c16c
 8003708:	5555554c 	.word	0x5555554c
 800370c:	3fa55555 	.word	0x3fa55555
 8003710:	00000000 	.word	0x00000000
 8003714:	3ff00000 	.word	0x3ff00000
 8003718:	3fe00000 	.word	0x3fe00000
 800371c:	3fd33332 	.word	0x3fd33332
 8003720:	3ff00000 	.word	0x3ff00000
 8003724:	3fe90000 	.word	0x3fe90000
 8003728:	3fd20000 	.word	0x3fd20000
 800372c:	00000000 	.word	0x00000000

08003730 <__kernel_sin>:
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003734:	ed2d 8b04 	vpush	{d8-d9}
 8003738:	eeb0 8a41 	vmov.f32	s16, s2
 800373c:	eef0 8a61 	vmov.f32	s17, s3
 8003740:	ec55 4b10 	vmov	r4, r5, d0
 8003744:	b083      	sub	sp, #12
 8003746:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800374a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800374e:	9001      	str	r0, [sp, #4]
 8003750:	da06      	bge.n	8003760 <__kernel_sin+0x30>
 8003752:	ee10 0a10 	vmov	r0, s0
 8003756:	4629      	mov	r1, r5
 8003758:	f7fd f994 	bl	8000a84 <__aeabi_d2iz>
 800375c:	2800      	cmp	r0, #0
 800375e:	d051      	beq.n	8003804 <__kernel_sin+0xd4>
 8003760:	4622      	mov	r2, r4
 8003762:	462b      	mov	r3, r5
 8003764:	4620      	mov	r0, r4
 8003766:	4629      	mov	r1, r5
 8003768:	f7fc fef2 	bl	8000550 <__aeabi_dmul>
 800376c:	4682      	mov	sl, r0
 800376e:	468b      	mov	fp, r1
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4620      	mov	r0, r4
 8003776:	4629      	mov	r1, r5
 8003778:	f7fc feea 	bl	8000550 <__aeabi_dmul>
 800377c:	a341      	add	r3, pc, #260	; (adr r3, 8003884 <__kernel_sin+0x154>)
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	4680      	mov	r8, r0
 8003784:	4689      	mov	r9, r1
 8003786:	4650      	mov	r0, sl
 8003788:	4659      	mov	r1, fp
 800378a:	f7fc fee1 	bl	8000550 <__aeabi_dmul>
 800378e:	a33f      	add	r3, pc, #252	; (adr r3, 800388c <__kernel_sin+0x15c>)
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f7fc fd24 	bl	80001e0 <__aeabi_dsub>
 8003798:	4652      	mov	r2, sl
 800379a:	465b      	mov	r3, fp
 800379c:	f7fc fed8 	bl	8000550 <__aeabi_dmul>
 80037a0:	a33c      	add	r3, pc, #240	; (adr r3, 8003894 <__kernel_sin+0x164>)
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f7fc fd1d 	bl	80001e4 <__adddf3>
 80037aa:	4652      	mov	r2, sl
 80037ac:	465b      	mov	r3, fp
 80037ae:	f7fc fecf 	bl	8000550 <__aeabi_dmul>
 80037b2:	a33a      	add	r3, pc, #232	; (adr r3, 800389c <__kernel_sin+0x16c>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc fd12 	bl	80001e0 <__aeabi_dsub>
 80037bc:	4652      	mov	r2, sl
 80037be:	465b      	mov	r3, fp
 80037c0:	f7fc fec6 	bl	8000550 <__aeabi_dmul>
 80037c4:	a337      	add	r3, pc, #220	; (adr r3, 80038a4 <__kernel_sin+0x174>)
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f7fc fd0b 	bl	80001e4 <__adddf3>
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	4606      	mov	r6, r0
 80037d2:	460f      	mov	r7, r1
 80037d4:	b9eb      	cbnz	r3, 8003812 <__kernel_sin+0xe2>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4650      	mov	r0, sl
 80037dc:	4659      	mov	r1, fp
 80037de:	f7fc feb7 	bl	8000550 <__aeabi_dmul>
 80037e2:	a325      	add	r3, pc, #148	; (adr r3, 8003878 <__kernel_sin+0x148>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f7fc fcfa 	bl	80001e0 <__aeabi_dsub>
 80037ec:	4642      	mov	r2, r8
 80037ee:	464b      	mov	r3, r9
 80037f0:	f7fc feae 	bl	8000550 <__aeabi_dmul>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4620      	mov	r0, r4
 80037fa:	4629      	mov	r1, r5
 80037fc:	f7fc fcf2 	bl	80001e4 <__adddf3>
 8003800:	4604      	mov	r4, r0
 8003802:	460d      	mov	r5, r1
 8003804:	ec45 4b10 	vmov	d0, r4, r5
 8003808:	b003      	add	sp, #12
 800380a:	ecbd 8b04 	vpop	{d8-d9}
 800380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003812:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <__kernel_sin+0x150>)
 8003814:	ec51 0b18 	vmov	r0, r1, d8
 8003818:	2200      	movs	r2, #0
 800381a:	f7fc fe99 	bl	8000550 <__aeabi_dmul>
 800381e:	4632      	mov	r2, r6
 8003820:	ec41 0b19 	vmov	d9, r0, r1
 8003824:	463b      	mov	r3, r7
 8003826:	4640      	mov	r0, r8
 8003828:	4649      	mov	r1, r9
 800382a:	f7fc fe91 	bl	8000550 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	ec51 0b19 	vmov	r0, r1, d9
 8003836:	f7fc fcd3 	bl	80001e0 <__aeabi_dsub>
 800383a:	4652      	mov	r2, sl
 800383c:	465b      	mov	r3, fp
 800383e:	f7fc fe87 	bl	8000550 <__aeabi_dmul>
 8003842:	ec53 2b18 	vmov	r2, r3, d8
 8003846:	f7fc fccb 	bl	80001e0 <__aeabi_dsub>
 800384a:	a30b      	add	r3, pc, #44	; (adr r3, 8003878 <__kernel_sin+0x148>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	4606      	mov	r6, r0
 8003852:	460f      	mov	r7, r1
 8003854:	4640      	mov	r0, r8
 8003856:	4649      	mov	r1, r9
 8003858:	f7fc fe7a 	bl	8000550 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4630      	mov	r0, r6
 8003862:	4639      	mov	r1, r7
 8003864:	f7fc fcbe 	bl	80001e4 <__adddf3>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	f7fc fcb6 	bl	80001e0 <__aeabi_dsub>
 8003874:	e7c4      	b.n	8003800 <__kernel_sin+0xd0>
 8003876:	bf00      	nop
 8003878:	55555549 	.word	0x55555549
 800387c:	3fc55555 	.word	0x3fc55555
 8003880:	3fe00000 	.word	0x3fe00000
 8003884:	5acfd57c 	.word	0x5acfd57c
 8003888:	3de5d93a 	.word	0x3de5d93a
 800388c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003890:	3e5ae5e6 	.word	0x3e5ae5e6
 8003894:	57b1fe7d 	.word	0x57b1fe7d
 8003898:	3ec71de3 	.word	0x3ec71de3
 800389c:	19c161d5 	.word	0x19c161d5
 80038a0:	3f2a01a0 	.word	0x3f2a01a0
 80038a4:	1110f8a6 	.word	0x1110f8a6
 80038a8:	3f811111 	.word	0x3f811111
 80038ac:	00000000 	.word	0x00000000

080038b0 <__ieee754_rem_pio2>:
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	ed2d 8b02 	vpush	{d8}
 80038b8:	ec55 4b10 	vmov	r4, r5, d0
 80038bc:	4bca      	ldr	r3, [pc, #808]	; (8003be8 <__ieee754_rem_pio2+0x338>)
 80038be:	b08b      	sub	sp, #44	; 0x2c
 80038c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80038c4:	4598      	cmp	r8, r3
 80038c6:	4682      	mov	sl, r0
 80038c8:	9502      	str	r5, [sp, #8]
 80038ca:	dc08      	bgt.n	80038de <__ieee754_rem_pio2+0x2e>
 80038cc:	2200      	movs	r2, #0
 80038ce:	2300      	movs	r3, #0
 80038d0:	ed80 0b00 	vstr	d0, [r0]
 80038d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80038d8:	f04f 0b00 	mov.w	fp, #0
 80038dc:	e028      	b.n	8003930 <__ieee754_rem_pio2+0x80>
 80038de:	4bc3      	ldr	r3, [pc, #780]	; (8003bec <__ieee754_rem_pio2+0x33c>)
 80038e0:	4598      	cmp	r8, r3
 80038e2:	dc78      	bgt.n	80039d6 <__ieee754_rem_pio2+0x126>
 80038e4:	9b02      	ldr	r3, [sp, #8]
 80038e6:	4ec2      	ldr	r6, [pc, #776]	; (8003bf0 <__ieee754_rem_pio2+0x340>)
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	ee10 0a10 	vmov	r0, s0
 80038ee:	a3b0      	add	r3, pc, #704	; (adr r3, 8003bb0 <__ieee754_rem_pio2+0x300>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	4629      	mov	r1, r5
 80038f6:	dd39      	ble.n	800396c <__ieee754_rem_pio2+0xbc>
 80038f8:	f7fc fc72 	bl	80001e0 <__aeabi_dsub>
 80038fc:	45b0      	cmp	r8, r6
 80038fe:	4604      	mov	r4, r0
 8003900:	460d      	mov	r5, r1
 8003902:	d01b      	beq.n	800393c <__ieee754_rem_pio2+0x8c>
 8003904:	a3ac      	add	r3, pc, #688	; (adr r3, 8003bb8 <__ieee754_rem_pio2+0x308>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f7fc fc69 	bl	80001e0 <__aeabi_dsub>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	e9ca 2300 	strd	r2, r3, [sl]
 8003916:	4620      	mov	r0, r4
 8003918:	4629      	mov	r1, r5
 800391a:	f7fc fc61 	bl	80001e0 <__aeabi_dsub>
 800391e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003bb8 <__ieee754_rem_pio2+0x308>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc fc5c 	bl	80001e0 <__aeabi_dsub>
 8003928:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800392c:	f04f 0b01 	mov.w	fp, #1
 8003930:	4658      	mov	r0, fp
 8003932:	b00b      	add	sp, #44	; 0x2c
 8003934:	ecbd 8b02 	vpop	{d8}
 8003938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003bc0 <__ieee754_rem_pio2+0x310>)
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f7fc fc4d 	bl	80001e0 <__aeabi_dsub>
 8003946:	a3a0      	add	r3, pc, #640	; (adr r3, 8003bc8 <__ieee754_rem_pio2+0x318>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	4604      	mov	r4, r0
 800394e:	460d      	mov	r5, r1
 8003950:	f7fc fc46 	bl	80001e0 <__aeabi_dsub>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	e9ca 2300 	strd	r2, r3, [sl]
 800395c:	4620      	mov	r0, r4
 800395e:	4629      	mov	r1, r5
 8003960:	f7fc fc3e 	bl	80001e0 <__aeabi_dsub>
 8003964:	a398      	add	r3, pc, #608	; (adr r3, 8003bc8 <__ieee754_rem_pio2+0x318>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	e7db      	b.n	8003924 <__ieee754_rem_pio2+0x74>
 800396c:	f7fc fc3a 	bl	80001e4 <__adddf3>
 8003970:	45b0      	cmp	r8, r6
 8003972:	4604      	mov	r4, r0
 8003974:	460d      	mov	r5, r1
 8003976:	d016      	beq.n	80039a6 <__ieee754_rem_pio2+0xf6>
 8003978:	a38f      	add	r3, pc, #572	; (adr r3, 8003bb8 <__ieee754_rem_pio2+0x308>)
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f7fc fc31 	bl	80001e4 <__adddf3>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	e9ca 2300 	strd	r2, r3, [sl]
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f7fc fc27 	bl	80001e0 <__aeabi_dsub>
 8003992:	a389      	add	r3, pc, #548	; (adr r3, 8003bb8 <__ieee754_rem_pio2+0x308>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f7fc fc24 	bl	80001e4 <__adddf3>
 800399c:	f04f 3bff 	mov.w	fp, #4294967295
 80039a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80039a4:	e7c4      	b.n	8003930 <__ieee754_rem_pio2+0x80>
 80039a6:	a386      	add	r3, pc, #536	; (adr r3, 8003bc0 <__ieee754_rem_pio2+0x310>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc fc1a 	bl	80001e4 <__adddf3>
 80039b0:	a385      	add	r3, pc, #532	; (adr r3, 8003bc8 <__ieee754_rem_pio2+0x318>)
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	4604      	mov	r4, r0
 80039b8:	460d      	mov	r5, r1
 80039ba:	f7fc fc13 	bl	80001e4 <__adddf3>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	e9ca 2300 	strd	r2, r3, [sl]
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7fc fc09 	bl	80001e0 <__aeabi_dsub>
 80039ce:	a37e      	add	r3, pc, #504	; (adr r3, 8003bc8 <__ieee754_rem_pio2+0x318>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	e7e0      	b.n	8003998 <__ieee754_rem_pio2+0xe8>
 80039d6:	4b87      	ldr	r3, [pc, #540]	; (8003bf4 <__ieee754_rem_pio2+0x344>)
 80039d8:	4598      	cmp	r8, r3
 80039da:	f300 80d8 	bgt.w	8003b8e <__ieee754_rem_pio2+0x2de>
 80039de:	f000 f96d 	bl	8003cbc <fabs>
 80039e2:	ec55 4b10 	vmov	r4, r5, d0
 80039e6:	ee10 0a10 	vmov	r0, s0
 80039ea:	a379      	add	r3, pc, #484	; (adr r3, 8003bd0 <__ieee754_rem_pio2+0x320>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	4629      	mov	r1, r5
 80039f2:	f7fc fdad 	bl	8000550 <__aeabi_dmul>
 80039f6:	4b80      	ldr	r3, [pc, #512]	; (8003bf8 <__ieee754_rem_pio2+0x348>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	f7fc fbf3 	bl	80001e4 <__adddf3>
 80039fe:	f7fd f841 	bl	8000a84 <__aeabi_d2iz>
 8003a02:	4683      	mov	fp, r0
 8003a04:	f7fc fd3a 	bl	800047c <__aeabi_i2d>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	ec43 2b18 	vmov	d8, r2, r3
 8003a10:	a367      	add	r3, pc, #412	; (adr r3, 8003bb0 <__ieee754_rem_pio2+0x300>)
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	f7fc fd9b 	bl	8000550 <__aeabi_dmul>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4629      	mov	r1, r5
 8003a22:	f7fc fbdd 	bl	80001e0 <__aeabi_dsub>
 8003a26:	a364      	add	r3, pc, #400	; (adr r3, 8003bb8 <__ieee754_rem_pio2+0x308>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	460f      	mov	r7, r1
 8003a30:	ec51 0b18 	vmov	r0, r1, d8
 8003a34:	f7fc fd8c 	bl	8000550 <__aeabi_dmul>
 8003a38:	f1bb 0f1f 	cmp.w	fp, #31
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	460d      	mov	r5, r1
 8003a40:	dc0d      	bgt.n	8003a5e <__ieee754_rem_pio2+0x1ae>
 8003a42:	4b6e      	ldr	r3, [pc, #440]	; (8003bfc <__ieee754_rem_pio2+0x34c>)
 8003a44:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4c:	4543      	cmp	r3, r8
 8003a4e:	d006      	beq.n	8003a5e <__ieee754_rem_pio2+0x1ae>
 8003a50:	4622      	mov	r2, r4
 8003a52:	462b      	mov	r3, r5
 8003a54:	4630      	mov	r0, r6
 8003a56:	4639      	mov	r1, r7
 8003a58:	f7fc fbc2 	bl	80001e0 <__aeabi_dsub>
 8003a5c:	e00e      	b.n	8003a7c <__ieee754_rem_pio2+0x1cc>
 8003a5e:	462b      	mov	r3, r5
 8003a60:	4622      	mov	r2, r4
 8003a62:	4630      	mov	r0, r6
 8003a64:	4639      	mov	r1, r7
 8003a66:	f7fc fbbb 	bl	80001e0 <__aeabi_dsub>
 8003a6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003a6e:	9303      	str	r3, [sp, #12]
 8003a70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003a74:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	dc02      	bgt.n	8003a82 <__ieee754_rem_pio2+0x1d2>
 8003a7c:	e9ca 0100 	strd	r0, r1, [sl]
 8003a80:	e039      	b.n	8003af6 <__ieee754_rem_pio2+0x246>
 8003a82:	a34f      	add	r3, pc, #316	; (adr r3, 8003bc0 <__ieee754_rem_pio2+0x310>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	ec51 0b18 	vmov	r0, r1, d8
 8003a8c:	f7fc fd60 	bl	8000550 <__aeabi_dmul>
 8003a90:	4604      	mov	r4, r0
 8003a92:	460d      	mov	r5, r1
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4630      	mov	r0, r6
 8003a9a:	4639      	mov	r1, r7
 8003a9c:	f7fc fba0 	bl	80001e0 <__aeabi_dsub>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4680      	mov	r8, r0
 8003aa6:	4689      	mov	r9, r1
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	4639      	mov	r1, r7
 8003aac:	f7fc fb98 	bl	80001e0 <__aeabi_dsub>
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	f7fc fb94 	bl	80001e0 <__aeabi_dsub>
 8003ab8:	a343      	add	r3, pc, #268	; (adr r3, 8003bc8 <__ieee754_rem_pio2+0x318>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	4604      	mov	r4, r0
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	ec51 0b18 	vmov	r0, r1, d8
 8003ac6:	f7fc fd43 	bl	8000550 <__aeabi_dmul>
 8003aca:	4622      	mov	r2, r4
 8003acc:	462b      	mov	r3, r5
 8003ace:	f7fc fb87 	bl	80001e0 <__aeabi_dsub>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	460d      	mov	r5, r1
 8003ada:	4640      	mov	r0, r8
 8003adc:	4649      	mov	r1, r9
 8003ade:	f7fc fb7f 	bl	80001e0 <__aeabi_dsub>
 8003ae2:	9a03      	ldr	r2, [sp, #12]
 8003ae4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b31      	cmp	r3, #49	; 0x31
 8003aec:	dc24      	bgt.n	8003b38 <__ieee754_rem_pio2+0x288>
 8003aee:	e9ca 0100 	strd	r0, r1, [sl]
 8003af2:	4646      	mov	r6, r8
 8003af4:	464f      	mov	r7, r9
 8003af6:	e9da 8900 	ldrd	r8, r9, [sl]
 8003afa:	4630      	mov	r0, r6
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	4639      	mov	r1, r7
 8003b02:	f7fc fb6d 	bl	80001e0 <__aeabi_dsub>
 8003b06:	462b      	mov	r3, r5
 8003b08:	4622      	mov	r2, r4
 8003b0a:	f7fc fb69 	bl	80001e0 <__aeabi_dsub>
 8003b0e:	9b02      	ldr	r3, [sp, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003b16:	f6bf af0b 	bge.w	8003930 <__ieee754_rem_pio2+0x80>
 8003b1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003b1e:	f8ca 3004 	str.w	r3, [sl, #4]
 8003b22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b26:	f8ca 8000 	str.w	r8, [sl]
 8003b2a:	f8ca 0008 	str.w	r0, [sl, #8]
 8003b2e:	f8ca 300c 	str.w	r3, [sl, #12]
 8003b32:	f1cb 0b00 	rsb	fp, fp, #0
 8003b36:	e6fb      	b.n	8003930 <__ieee754_rem_pio2+0x80>
 8003b38:	a327      	add	r3, pc, #156	; (adr r3, 8003bd8 <__ieee754_rem_pio2+0x328>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	ec51 0b18 	vmov	r0, r1, d8
 8003b42:	f7fc fd05 	bl	8000550 <__aeabi_dmul>
 8003b46:	4604      	mov	r4, r0
 8003b48:	460d      	mov	r5, r1
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4640      	mov	r0, r8
 8003b50:	4649      	mov	r1, r9
 8003b52:	f7fc fb45 	bl	80001e0 <__aeabi_dsub>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	460f      	mov	r7, r1
 8003b5e:	4640      	mov	r0, r8
 8003b60:	4649      	mov	r1, r9
 8003b62:	f7fc fb3d 	bl	80001e0 <__aeabi_dsub>
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f7fc fb39 	bl	80001e0 <__aeabi_dsub>
 8003b6e:	a31c      	add	r3, pc, #112	; (adr r3, 8003be0 <__ieee754_rem_pio2+0x330>)
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	4604      	mov	r4, r0
 8003b76:	460d      	mov	r5, r1
 8003b78:	ec51 0b18 	vmov	r0, r1, d8
 8003b7c:	f7fc fce8 	bl	8000550 <__aeabi_dmul>
 8003b80:	4622      	mov	r2, r4
 8003b82:	462b      	mov	r3, r5
 8003b84:	f7fc fb2c 	bl	80001e0 <__aeabi_dsub>
 8003b88:	4604      	mov	r4, r0
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	e760      	b.n	8003a50 <__ieee754_rem_pio2+0x1a0>
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <__ieee754_rem_pio2+0x350>)
 8003b90:	4598      	cmp	r8, r3
 8003b92:	dd37      	ble.n	8003c04 <__ieee754_rem_pio2+0x354>
 8003b94:	ee10 2a10 	vmov	r2, s0
 8003b98:	462b      	mov	r3, r5
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7fc fb1f 	bl	80001e0 <__aeabi_dsub>
 8003ba2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003ba6:	e9ca 0100 	strd	r0, r1, [sl]
 8003baa:	e695      	b.n	80038d8 <__ieee754_rem_pio2+0x28>
 8003bac:	f3af 8000 	nop.w
 8003bb0:	54400000 	.word	0x54400000
 8003bb4:	3ff921fb 	.word	0x3ff921fb
 8003bb8:	1a626331 	.word	0x1a626331
 8003bbc:	3dd0b461 	.word	0x3dd0b461
 8003bc0:	1a600000 	.word	0x1a600000
 8003bc4:	3dd0b461 	.word	0x3dd0b461
 8003bc8:	2e037073 	.word	0x2e037073
 8003bcc:	3ba3198a 	.word	0x3ba3198a
 8003bd0:	6dc9c883 	.word	0x6dc9c883
 8003bd4:	3fe45f30 	.word	0x3fe45f30
 8003bd8:	2e000000 	.word	0x2e000000
 8003bdc:	3ba3198a 	.word	0x3ba3198a
 8003be0:	252049c1 	.word	0x252049c1
 8003be4:	397b839a 	.word	0x397b839a
 8003be8:	3fe921fb 	.word	0x3fe921fb
 8003bec:	4002d97b 	.word	0x4002d97b
 8003bf0:	3ff921fb 	.word	0x3ff921fb
 8003bf4:	413921fb 	.word	0x413921fb
 8003bf8:	3fe00000 	.word	0x3fe00000
 8003bfc:	080045a8 	.word	0x080045a8
 8003c00:	7fefffff 	.word	0x7fefffff
 8003c04:	ea4f 5628 	mov.w	r6, r8, asr #20
 8003c08:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8003c0c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8003c10:	4620      	mov	r0, r4
 8003c12:	460d      	mov	r5, r1
 8003c14:	f7fc ff36 	bl	8000a84 <__aeabi_d2iz>
 8003c18:	f7fc fc30 	bl	800047c <__aeabi_i2d>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4620      	mov	r0, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c28:	f7fc fada 	bl	80001e0 <__aeabi_dsub>
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <__ieee754_rem_pio2+0x404>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f7fc fc8e 	bl	8000550 <__aeabi_dmul>
 8003c34:	460d      	mov	r5, r1
 8003c36:	4604      	mov	r4, r0
 8003c38:	f7fc ff24 	bl	8000a84 <__aeabi_d2iz>
 8003c3c:	f7fc fc1e 	bl	800047c <__aeabi_i2d>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4620      	mov	r0, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c4c:	f7fc fac8 	bl	80001e0 <__aeabi_dsub>
 8003c50:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <__ieee754_rem_pio2+0x404>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	f7fc fc7c 	bl	8000550 <__aeabi_dmul>
 8003c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003c5c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8003c60:	2703      	movs	r7, #3
 8003c62:	2400      	movs	r4, #0
 8003c64:	2500      	movs	r5, #0
 8003c66:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	46b9      	mov	r9, r7
 8003c70:	3f01      	subs	r7, #1
 8003c72:	f7fc fed5 	bl	8000a20 <__aeabi_dcmpeq>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d1f5      	bne.n	8003c66 <__ieee754_rem_pio2+0x3b6>
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <__ieee754_rem_pio2+0x408>)
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	2302      	movs	r3, #2
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	4632      	mov	r2, r6
 8003c84:	464b      	mov	r3, r9
 8003c86:	4651      	mov	r1, sl
 8003c88:	a804      	add	r0, sp, #16
 8003c8a:	f000 f821 	bl	8003cd0 <__kernel_rem_pio2>
 8003c8e:	9b02      	ldr	r3, [sp, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	4683      	mov	fp, r0
 8003c94:	f6bf ae4c 	bge.w	8003930 <__ieee754_rem_pio2+0x80>
 8003c98:	e9da 2100 	ldrd	r2, r1, [sl]
 8003c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ca0:	e9ca 2300 	strd	r2, r3, [sl]
 8003ca4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003cac:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003cb0:	e73f      	b.n	8003b32 <__ieee754_rem_pio2+0x282>
 8003cb2:	bf00      	nop
 8003cb4:	41700000 	.word	0x41700000
 8003cb8:	08004628 	.word	0x08004628

08003cbc <fabs>:
 8003cbc:	ec51 0b10 	vmov	r0, r1, d0
 8003cc0:	ee10 2a10 	vmov	r2, s0
 8003cc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003cc8:	ec43 2b10 	vmov	d0, r2, r3
 8003ccc:	4770      	bx	lr
	...

08003cd0 <__kernel_rem_pio2>:
 8003cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd4:	ed2d 8b02 	vpush	{d8}
 8003cd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003cdc:	f112 0f14 	cmn.w	r2, #20
 8003ce0:	9306      	str	r3, [sp, #24]
 8003ce2:	9104      	str	r1, [sp, #16]
 8003ce4:	4bc2      	ldr	r3, [pc, #776]	; (8003ff0 <__kernel_rem_pio2+0x320>)
 8003ce6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003ce8:	9009      	str	r0, [sp, #36]	; 0x24
 8003cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	9b06      	ldr	r3, [sp, #24]
 8003cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cf6:	bfa8      	it	ge
 8003cf8:	1ed4      	subge	r4, r2, #3
 8003cfa:	9305      	str	r3, [sp, #20]
 8003cfc:	bfb2      	itee	lt
 8003cfe:	2400      	movlt	r4, #0
 8003d00:	2318      	movge	r3, #24
 8003d02:	fb94 f4f3 	sdivge	r4, r4, r3
 8003d06:	f06f 0317 	mvn.w	r3, #23
 8003d0a:	fb04 3303 	mla	r3, r4, r3, r3
 8003d0e:	eb03 0a02 	add.w	sl, r3, r2
 8003d12:	9b00      	ldr	r3, [sp, #0]
 8003d14:	9a05      	ldr	r2, [sp, #20]
 8003d16:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8003fe0 <__kernel_rem_pio2+0x310>
 8003d1a:	eb03 0802 	add.w	r8, r3, r2
 8003d1e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003d20:	1aa7      	subs	r7, r4, r2
 8003d22:	ae20      	add	r6, sp, #128	; 0x80
 8003d24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003d28:	2500      	movs	r5, #0
 8003d2a:	4545      	cmp	r5, r8
 8003d2c:	dd13      	ble.n	8003d56 <__kernel_rem_pio2+0x86>
 8003d2e:	9b06      	ldr	r3, [sp, #24]
 8003d30:	aa20      	add	r2, sp, #128	; 0x80
 8003d32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003d36:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003d3a:	f04f 0800 	mov.w	r8, #0
 8003d3e:	9b00      	ldr	r3, [sp, #0]
 8003d40:	4598      	cmp	r8, r3
 8003d42:	dc31      	bgt.n	8003da8 <__kernel_rem_pio2+0xd8>
 8003d44:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8003fe0 <__kernel_rem_pio2+0x310>
 8003d48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003d4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003d50:	462f      	mov	r7, r5
 8003d52:	2600      	movs	r6, #0
 8003d54:	e01b      	b.n	8003d8e <__kernel_rem_pio2+0xbe>
 8003d56:	42ef      	cmn	r7, r5
 8003d58:	d407      	bmi.n	8003d6a <__kernel_rem_pio2+0x9a>
 8003d5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003d5e:	f7fc fb8d 	bl	800047c <__aeabi_i2d>
 8003d62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003d66:	3501      	adds	r5, #1
 8003d68:	e7df      	b.n	8003d2a <__kernel_rem_pio2+0x5a>
 8003d6a:	ec51 0b18 	vmov	r0, r1, d8
 8003d6e:	e7f8      	b.n	8003d62 <__kernel_rem_pio2+0x92>
 8003d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003d78:	f7fc fbea 	bl	8000550 <__aeabi_dmul>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d84:	f7fc fa2e 	bl	80001e4 <__adddf3>
 8003d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	9b05      	ldr	r3, [sp, #20]
 8003d90:	429e      	cmp	r6, r3
 8003d92:	f1a7 0708 	sub.w	r7, r7, #8
 8003d96:	ddeb      	ble.n	8003d70 <__kernel_rem_pio2+0xa0>
 8003d98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d9c:	f108 0801 	add.w	r8, r8, #1
 8003da0:	ecab 7b02 	vstmia	fp!, {d7}
 8003da4:	3508      	adds	r5, #8
 8003da6:	e7ca      	b.n	8003d3e <__kernel_rem_pio2+0x6e>
 8003da8:	9b00      	ldr	r3, [sp, #0]
 8003daa:	aa0c      	add	r2, sp, #48	; 0x30
 8003dac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003db2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003db4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003db8:	9c00      	ldr	r4, [sp, #0]
 8003dba:	930a      	str	r3, [sp, #40]	; 0x28
 8003dbc:	00e3      	lsls	r3, r4, #3
 8003dbe:	9308      	str	r3, [sp, #32]
 8003dc0:	ab98      	add	r3, sp, #608	; 0x260
 8003dc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003dc6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003dca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003dce:	ab70      	add	r3, sp, #448	; 0x1c0
 8003dd0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003dd4:	46c3      	mov	fp, r8
 8003dd6:	46a1      	mov	r9, r4
 8003dd8:	f1b9 0f00 	cmp.w	r9, #0
 8003ddc:	f1a5 0508 	sub.w	r5, r5, #8
 8003de0:	dc77      	bgt.n	8003ed2 <__kernel_rem_pio2+0x202>
 8003de2:	ec47 6b10 	vmov	d0, r6, r7
 8003de6:	4650      	mov	r0, sl
 8003de8:	f000 fac2 	bl	8004370 <scalbn>
 8003dec:	ec57 6b10 	vmov	r6, r7, d0
 8003df0:	2200      	movs	r2, #0
 8003df2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003df6:	ee10 0a10 	vmov	r0, s0
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	f7fc fba8 	bl	8000550 <__aeabi_dmul>
 8003e00:	ec41 0b10 	vmov	d0, r0, r1
 8003e04:	f000 fb34 	bl	8004470 <floor>
 8003e08:	4b7a      	ldr	r3, [pc, #488]	; (8003ff4 <__kernel_rem_pio2+0x324>)
 8003e0a:	ec51 0b10 	vmov	r0, r1, d0
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f7fc fb9e 	bl	8000550 <__aeabi_dmul>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	f7fc f9e0 	bl	80001e0 <__aeabi_dsub>
 8003e20:	460f      	mov	r7, r1
 8003e22:	4606      	mov	r6, r0
 8003e24:	f7fc fe2e 	bl	8000a84 <__aeabi_d2iz>
 8003e28:	9002      	str	r0, [sp, #8]
 8003e2a:	f7fc fb27 	bl	800047c <__aeabi_i2d>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4630      	mov	r0, r6
 8003e34:	4639      	mov	r1, r7
 8003e36:	f7fc f9d3 	bl	80001e0 <__aeabi_dsub>
 8003e3a:	f1ba 0f00 	cmp.w	sl, #0
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460f      	mov	r7, r1
 8003e42:	dd6d      	ble.n	8003f20 <__kernel_rem_pio2+0x250>
 8003e44:	1e61      	subs	r1, r4, #1
 8003e46:	ab0c      	add	r3, sp, #48	; 0x30
 8003e48:	9d02      	ldr	r5, [sp, #8]
 8003e4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e4e:	f1ca 0018 	rsb	r0, sl, #24
 8003e52:	fa43 f200 	asr.w	r2, r3, r0
 8003e56:	4415      	add	r5, r2
 8003e58:	4082      	lsls	r2, r0
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	aa0c      	add	r2, sp, #48	; 0x30
 8003e5e:	9502      	str	r5, [sp, #8]
 8003e60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003e64:	f1ca 0217 	rsb	r2, sl, #23
 8003e68:	fa43 fb02 	asr.w	fp, r3, r2
 8003e6c:	f1bb 0f00 	cmp.w	fp, #0
 8003e70:	dd65      	ble.n	8003f3e <__kernel_rem_pio2+0x26e>
 8003e72:	9b02      	ldr	r3, [sp, #8]
 8003e74:	2200      	movs	r2, #0
 8003e76:	3301      	adds	r3, #1
 8003e78:	9302      	str	r3, [sp, #8]
 8003e7a:	4615      	mov	r5, r2
 8003e7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003e80:	4294      	cmp	r4, r2
 8003e82:	f300 809f 	bgt.w	8003fc4 <__kernel_rem_pio2+0x2f4>
 8003e86:	f1ba 0f00 	cmp.w	sl, #0
 8003e8a:	dd07      	ble.n	8003e9c <__kernel_rem_pio2+0x1cc>
 8003e8c:	f1ba 0f01 	cmp.w	sl, #1
 8003e90:	f000 80c1 	beq.w	8004016 <__kernel_rem_pio2+0x346>
 8003e94:	f1ba 0f02 	cmp.w	sl, #2
 8003e98:	f000 80c7 	beq.w	800402a <__kernel_rem_pio2+0x35a>
 8003e9c:	f1bb 0f02 	cmp.w	fp, #2
 8003ea0:	d14d      	bne.n	8003f3e <__kernel_rem_pio2+0x26e>
 8003ea2:	4632      	mov	r2, r6
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	4954      	ldr	r1, [pc, #336]	; (8003ff8 <__kernel_rem_pio2+0x328>)
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7fc f999 	bl	80001e0 <__aeabi_dsub>
 8003eae:	4606      	mov	r6, r0
 8003eb0:	460f      	mov	r7, r1
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	d043      	beq.n	8003f3e <__kernel_rem_pio2+0x26e>
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8003fe8 <__kernel_rem_pio2+0x318>
 8003ebc:	f000 fa58 	bl	8004370 <scalbn>
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	ec53 2b10 	vmov	r2, r3, d0
 8003ec8:	f7fc f98a 	bl	80001e0 <__aeabi_dsub>
 8003ecc:	4606      	mov	r6, r0
 8003ece:	460f      	mov	r7, r1
 8003ed0:	e035      	b.n	8003f3e <__kernel_rem_pio2+0x26e>
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <__kernel_rem_pio2+0x32c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	4639      	mov	r1, r7
 8003eda:	f7fc fb39 	bl	8000550 <__aeabi_dmul>
 8003ede:	f7fc fdd1 	bl	8000a84 <__aeabi_d2iz>
 8003ee2:	f7fc facb 	bl	800047c <__aeabi_i2d>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	ec43 2b18 	vmov	d8, r2, r3
 8003eee:	4b44      	ldr	r3, [pc, #272]	; (8004000 <__kernel_rem_pio2+0x330>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f7fc fb2d 	bl	8000550 <__aeabi_dmul>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4630      	mov	r0, r6
 8003efc:	4639      	mov	r1, r7
 8003efe:	f7fc f96f 	bl	80001e0 <__aeabi_dsub>
 8003f02:	f7fc fdbf 	bl	8000a84 <__aeabi_d2iz>
 8003f06:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f0a:	f84b 0b04 	str.w	r0, [fp], #4
 8003f0e:	ec51 0b18 	vmov	r0, r1, d8
 8003f12:	f7fc f967 	bl	80001e4 <__adddf3>
 8003f16:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	460f      	mov	r7, r1
 8003f1e:	e75b      	b.n	8003dd8 <__kernel_rem_pio2+0x108>
 8003f20:	d106      	bne.n	8003f30 <__kernel_rem_pio2+0x260>
 8003f22:	1e63      	subs	r3, r4, #1
 8003f24:	aa0c      	add	r2, sp, #48	; 0x30
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8003f2e:	e79d      	b.n	8003e6c <__kernel_rem_pio2+0x19c>
 8003f30:	4b34      	ldr	r3, [pc, #208]	; (8004004 <__kernel_rem_pio2+0x334>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	f7fc fd92 	bl	8000a5c <__aeabi_dcmpge>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d140      	bne.n	8003fbe <__kernel_rem_pio2+0x2ee>
 8003f3c:	4683      	mov	fp, r0
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2300      	movs	r3, #0
 8003f42:	4630      	mov	r0, r6
 8003f44:	4639      	mov	r1, r7
 8003f46:	f7fc fd6b 	bl	8000a20 <__aeabi_dcmpeq>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	f000 80c1 	beq.w	80040d2 <__kernel_rem_pio2+0x402>
 8003f50:	1e65      	subs	r5, r4, #1
 8003f52:	462b      	mov	r3, r5
 8003f54:	2200      	movs	r2, #0
 8003f56:	9900      	ldr	r1, [sp, #0]
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	da6d      	bge.n	8004038 <__kernel_rem_pio2+0x368>
 8003f5c:	2a00      	cmp	r2, #0
 8003f5e:	f000 808a 	beq.w	8004076 <__kernel_rem_pio2+0x3a6>
 8003f62:	ab0c      	add	r3, sp, #48	; 0x30
 8003f64:	f1aa 0a18 	sub.w	sl, sl, #24
 8003f68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80ae 	beq.w	80040ce <__kernel_rem_pio2+0x3fe>
 8003f72:	4650      	mov	r0, sl
 8003f74:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003fe8 <__kernel_rem_pio2+0x318>
 8003f78:	f000 f9fa 	bl	8004370 <scalbn>
 8003f7c:	1c6b      	adds	r3, r5, #1
 8003f7e:	00da      	lsls	r2, r3, #3
 8003f80:	9205      	str	r2, [sp, #20]
 8003f82:	ec57 6b10 	vmov	r6, r7, d0
 8003f86:	aa70      	add	r2, sp, #448	; 0x1c0
 8003f88:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003ffc <__kernel_rem_pio2+0x32c>
 8003f8c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8003f90:	462c      	mov	r4, r5
 8003f92:	f04f 0800 	mov.w	r8, #0
 8003f96:	2c00      	cmp	r4, #0
 8003f98:	f280 80d4 	bge.w	8004144 <__kernel_rem_pio2+0x474>
 8003f9c:	462c      	mov	r4, r5
 8003f9e:	2c00      	cmp	r4, #0
 8003fa0:	f2c0 8102 	blt.w	80041a8 <__kernel_rem_pio2+0x4d8>
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <__kernel_rem_pio2+0x338>)
 8003fa6:	461e      	mov	r6, r3
 8003fa8:	ab70      	add	r3, sp, #448	; 0x1c0
 8003faa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8003fae:	1b2b      	subs	r3, r5, r4
 8003fb0:	f04f 0900 	mov.w	r9, #0
 8003fb4:	f04f 0a00 	mov.w	sl, #0
 8003fb8:	2700      	movs	r7, #0
 8003fba:	9306      	str	r3, [sp, #24]
 8003fbc:	e0e6      	b.n	800418c <__kernel_rem_pio2+0x4bc>
 8003fbe:	f04f 0b02 	mov.w	fp, #2
 8003fc2:	e756      	b.n	8003e72 <__kernel_rem_pio2+0x1a2>
 8003fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fc8:	bb05      	cbnz	r5, 800400c <__kernel_rem_pio2+0x33c>
 8003fca:	b123      	cbz	r3, 8003fd6 <__kernel_rem_pio2+0x306>
 8003fcc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003fd0:	f8c8 3000 	str.w	r3, [r8]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	3201      	adds	r2, #1
 8003fd8:	f108 0804 	add.w	r8, r8, #4
 8003fdc:	461d      	mov	r5, r3
 8003fde:	e74f      	b.n	8003e80 <__kernel_rem_pio2+0x1b0>
	...
 8003fec:	3ff00000 	.word	0x3ff00000
 8003ff0:	08004770 	.word	0x08004770
 8003ff4:	40200000 	.word	0x40200000
 8003ff8:	3ff00000 	.word	0x3ff00000
 8003ffc:	3e700000 	.word	0x3e700000
 8004000:	41700000 	.word	0x41700000
 8004004:	3fe00000 	.word	0x3fe00000
 8004008:	08004730 	.word	0x08004730
 800400c:	1acb      	subs	r3, r1, r3
 800400e:	f8c8 3000 	str.w	r3, [r8]
 8004012:	462b      	mov	r3, r5
 8004014:	e7df      	b.n	8003fd6 <__kernel_rem_pio2+0x306>
 8004016:	1e62      	subs	r2, r4, #1
 8004018:	ab0c      	add	r3, sp, #48	; 0x30
 800401a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004022:	a90c      	add	r1, sp, #48	; 0x30
 8004024:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004028:	e738      	b.n	8003e9c <__kernel_rem_pio2+0x1cc>
 800402a:	1e62      	subs	r2, r4, #1
 800402c:	ab0c      	add	r3, sp, #48	; 0x30
 800402e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004032:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004036:	e7f4      	b.n	8004022 <__kernel_rem_pio2+0x352>
 8004038:	a90c      	add	r1, sp, #48	; 0x30
 800403a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800403e:	3b01      	subs	r3, #1
 8004040:	430a      	orrs	r2, r1
 8004042:	e788      	b.n	8003f56 <__kernel_rem_pio2+0x286>
 8004044:	3301      	adds	r3, #1
 8004046:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800404a:	2900      	cmp	r1, #0
 800404c:	d0fa      	beq.n	8004044 <__kernel_rem_pio2+0x374>
 800404e:	9a08      	ldr	r2, [sp, #32]
 8004050:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8004054:	446a      	add	r2, sp
 8004056:	3a98      	subs	r2, #152	; 0x98
 8004058:	9208      	str	r2, [sp, #32]
 800405a:	9a06      	ldr	r2, [sp, #24]
 800405c:	a920      	add	r1, sp, #128	; 0x80
 800405e:	18a2      	adds	r2, r4, r2
 8004060:	18e3      	adds	r3, r4, r3
 8004062:	f104 0801 	add.w	r8, r4, #1
 8004066:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800406a:	9302      	str	r3, [sp, #8]
 800406c:	9b02      	ldr	r3, [sp, #8]
 800406e:	4543      	cmp	r3, r8
 8004070:	da04      	bge.n	800407c <__kernel_rem_pio2+0x3ac>
 8004072:	461c      	mov	r4, r3
 8004074:	e6a2      	b.n	8003dbc <__kernel_rem_pio2+0xec>
 8004076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004078:	2301      	movs	r3, #1
 800407a:	e7e4      	b.n	8004046 <__kernel_rem_pio2+0x376>
 800407c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800407e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004082:	f7fc f9fb 	bl	800047c <__aeabi_i2d>
 8004086:	e8e5 0102 	strd	r0, r1, [r5], #8
 800408a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800408c:	46ab      	mov	fp, r5
 800408e:	461c      	mov	r4, r3
 8004090:	f04f 0900 	mov.w	r9, #0
 8004094:	2600      	movs	r6, #0
 8004096:	2700      	movs	r7, #0
 8004098:	9b05      	ldr	r3, [sp, #20]
 800409a:	4599      	cmp	r9, r3
 800409c:	dd06      	ble.n	80040ac <__kernel_rem_pio2+0x3dc>
 800409e:	9b08      	ldr	r3, [sp, #32]
 80040a0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80040a4:	f108 0801 	add.w	r8, r8, #1
 80040a8:	9308      	str	r3, [sp, #32]
 80040aa:	e7df      	b.n	800406c <__kernel_rem_pio2+0x39c>
 80040ac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80040b0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80040b4:	f7fc fa4c 	bl	8000550 <__aeabi_dmul>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4630      	mov	r0, r6
 80040be:	4639      	mov	r1, r7
 80040c0:	f7fc f890 	bl	80001e4 <__adddf3>
 80040c4:	f109 0901 	add.w	r9, r9, #1
 80040c8:	4606      	mov	r6, r0
 80040ca:	460f      	mov	r7, r1
 80040cc:	e7e4      	b.n	8004098 <__kernel_rem_pio2+0x3c8>
 80040ce:	3d01      	subs	r5, #1
 80040d0:	e747      	b.n	8003f62 <__kernel_rem_pio2+0x292>
 80040d2:	ec47 6b10 	vmov	d0, r6, r7
 80040d6:	f1ca 0000 	rsb	r0, sl, #0
 80040da:	f000 f949 	bl	8004370 <scalbn>
 80040de:	ec57 6b10 	vmov	r6, r7, d0
 80040e2:	4ba0      	ldr	r3, [pc, #640]	; (8004364 <__kernel_rem_pio2+0x694>)
 80040e4:	ee10 0a10 	vmov	r0, s0
 80040e8:	2200      	movs	r2, #0
 80040ea:	4639      	mov	r1, r7
 80040ec:	f7fc fcb6 	bl	8000a5c <__aeabi_dcmpge>
 80040f0:	b1f8      	cbz	r0, 8004132 <__kernel_rem_pio2+0x462>
 80040f2:	4b9d      	ldr	r3, [pc, #628]	; (8004368 <__kernel_rem_pio2+0x698>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	4630      	mov	r0, r6
 80040f8:	4639      	mov	r1, r7
 80040fa:	f7fc fa29 	bl	8000550 <__aeabi_dmul>
 80040fe:	f7fc fcc1 	bl	8000a84 <__aeabi_d2iz>
 8004102:	4680      	mov	r8, r0
 8004104:	f7fc f9ba 	bl	800047c <__aeabi_i2d>
 8004108:	4b96      	ldr	r3, [pc, #600]	; (8004364 <__kernel_rem_pio2+0x694>)
 800410a:	2200      	movs	r2, #0
 800410c:	f7fc fa20 	bl	8000550 <__aeabi_dmul>
 8004110:	460b      	mov	r3, r1
 8004112:	4602      	mov	r2, r0
 8004114:	4639      	mov	r1, r7
 8004116:	4630      	mov	r0, r6
 8004118:	f7fc f862 	bl	80001e0 <__aeabi_dsub>
 800411c:	f7fc fcb2 	bl	8000a84 <__aeabi_d2iz>
 8004120:	1c65      	adds	r5, r4, #1
 8004122:	ab0c      	add	r3, sp, #48	; 0x30
 8004124:	f10a 0a18 	add.w	sl, sl, #24
 8004128:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800412c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004130:	e71f      	b.n	8003f72 <__kernel_rem_pio2+0x2a2>
 8004132:	4630      	mov	r0, r6
 8004134:	4639      	mov	r1, r7
 8004136:	f7fc fca5 	bl	8000a84 <__aeabi_d2iz>
 800413a:	ab0c      	add	r3, sp, #48	; 0x30
 800413c:	4625      	mov	r5, r4
 800413e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004142:	e716      	b.n	8003f72 <__kernel_rem_pio2+0x2a2>
 8004144:	ab0c      	add	r3, sp, #48	; 0x30
 8004146:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800414a:	f7fc f997 	bl	800047c <__aeabi_i2d>
 800414e:	4632      	mov	r2, r6
 8004150:	463b      	mov	r3, r7
 8004152:	f7fc f9fd 	bl	8000550 <__aeabi_dmul>
 8004156:	4642      	mov	r2, r8
 8004158:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800415c:	464b      	mov	r3, r9
 800415e:	4630      	mov	r0, r6
 8004160:	4639      	mov	r1, r7
 8004162:	f7fc f9f5 	bl	8000550 <__aeabi_dmul>
 8004166:	3c01      	subs	r4, #1
 8004168:	4606      	mov	r6, r0
 800416a:	460f      	mov	r7, r1
 800416c:	e713      	b.n	8003f96 <__kernel_rem_pio2+0x2c6>
 800416e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004172:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8004176:	f7fc f9eb 	bl	8000550 <__aeabi_dmul>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4648      	mov	r0, r9
 8004180:	4651      	mov	r1, sl
 8004182:	f7fc f82f 	bl	80001e4 <__adddf3>
 8004186:	3701      	adds	r7, #1
 8004188:	4681      	mov	r9, r0
 800418a:	468a      	mov	sl, r1
 800418c:	9b00      	ldr	r3, [sp, #0]
 800418e:	429f      	cmp	r7, r3
 8004190:	dc02      	bgt.n	8004198 <__kernel_rem_pio2+0x4c8>
 8004192:	9b06      	ldr	r3, [sp, #24]
 8004194:	429f      	cmp	r7, r3
 8004196:	ddea      	ble.n	800416e <__kernel_rem_pio2+0x49e>
 8004198:	9a06      	ldr	r2, [sp, #24]
 800419a:	ab48      	add	r3, sp, #288	; 0x120
 800419c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80041a0:	e9c6 9a00 	strd	r9, sl, [r6]
 80041a4:	3c01      	subs	r4, #1
 80041a6:	e6fa      	b.n	8003f9e <__kernel_rem_pio2+0x2ce>
 80041a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	dc0b      	bgt.n	80041c6 <__kernel_rem_pio2+0x4f6>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	dc39      	bgt.n	8004226 <__kernel_rem_pio2+0x556>
 80041b2:	d05d      	beq.n	8004270 <__kernel_rem_pio2+0x5a0>
 80041b4:	9b02      	ldr	r3, [sp, #8]
 80041b6:	f003 0007 	and.w	r0, r3, #7
 80041ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80041be:	ecbd 8b02 	vpop	{d8}
 80041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d1f3      	bne.n	80041b4 <__kernel_rem_pio2+0x4e4>
 80041cc:	9b05      	ldr	r3, [sp, #20]
 80041ce:	9500      	str	r5, [sp, #0]
 80041d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80041d4:	eb0d 0403 	add.w	r4, sp, r3
 80041d8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80041dc:	46a2      	mov	sl, r4
 80041de:	9b00      	ldr	r3, [sp, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f1aa 0a08 	sub.w	sl, sl, #8
 80041e6:	dc69      	bgt.n	80042bc <__kernel_rem_pio2+0x5ec>
 80041e8:	46aa      	mov	sl, r5
 80041ea:	f1ba 0f01 	cmp.w	sl, #1
 80041ee:	f1a4 0408 	sub.w	r4, r4, #8
 80041f2:	f300 8083 	bgt.w	80042fc <__kernel_rem_pio2+0x62c>
 80041f6:	9c05      	ldr	r4, [sp, #20]
 80041f8:	ab48      	add	r3, sp, #288	; 0x120
 80041fa:	441c      	add	r4, r3
 80041fc:	2000      	movs	r0, #0
 80041fe:	2100      	movs	r1, #0
 8004200:	2d01      	cmp	r5, #1
 8004202:	f300 809a 	bgt.w	800433a <__kernel_rem_pio2+0x66a>
 8004206:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800420a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800420e:	f1bb 0f00 	cmp.w	fp, #0
 8004212:	f040 8098 	bne.w	8004346 <__kernel_rem_pio2+0x676>
 8004216:	9b04      	ldr	r3, [sp, #16]
 8004218:	e9c3 7800 	strd	r7, r8, [r3]
 800421c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004220:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004224:	e7c6      	b.n	80041b4 <__kernel_rem_pio2+0x4e4>
 8004226:	9e05      	ldr	r6, [sp, #20]
 8004228:	ab48      	add	r3, sp, #288	; 0x120
 800422a:	441e      	add	r6, r3
 800422c:	462c      	mov	r4, r5
 800422e:	2000      	movs	r0, #0
 8004230:	2100      	movs	r1, #0
 8004232:	2c00      	cmp	r4, #0
 8004234:	da33      	bge.n	800429e <__kernel_rem_pio2+0x5ce>
 8004236:	f1bb 0f00 	cmp.w	fp, #0
 800423a:	d036      	beq.n	80042aa <__kernel_rem_pio2+0x5da>
 800423c:	4602      	mov	r2, r0
 800423e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004242:	9c04      	ldr	r4, [sp, #16]
 8004244:	e9c4 2300 	strd	r2, r3, [r4]
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004250:	f7fb ffc6 	bl	80001e0 <__aeabi_dsub>
 8004254:	ae4a      	add	r6, sp, #296	; 0x128
 8004256:	2401      	movs	r4, #1
 8004258:	42a5      	cmp	r5, r4
 800425a:	da29      	bge.n	80042b0 <__kernel_rem_pio2+0x5e0>
 800425c:	f1bb 0f00 	cmp.w	fp, #0
 8004260:	d002      	beq.n	8004268 <__kernel_rem_pio2+0x598>
 8004262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004266:	4619      	mov	r1, r3
 8004268:	9b04      	ldr	r3, [sp, #16]
 800426a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800426e:	e7a1      	b.n	80041b4 <__kernel_rem_pio2+0x4e4>
 8004270:	9c05      	ldr	r4, [sp, #20]
 8004272:	ab48      	add	r3, sp, #288	; 0x120
 8004274:	441c      	add	r4, r3
 8004276:	2000      	movs	r0, #0
 8004278:	2100      	movs	r1, #0
 800427a:	2d00      	cmp	r5, #0
 800427c:	da09      	bge.n	8004292 <__kernel_rem_pio2+0x5c2>
 800427e:	f1bb 0f00 	cmp.w	fp, #0
 8004282:	d002      	beq.n	800428a <__kernel_rem_pio2+0x5ba>
 8004284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004288:	4619      	mov	r1, r3
 800428a:	9b04      	ldr	r3, [sp, #16]
 800428c:	e9c3 0100 	strd	r0, r1, [r3]
 8004290:	e790      	b.n	80041b4 <__kernel_rem_pio2+0x4e4>
 8004292:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004296:	f7fb ffa5 	bl	80001e4 <__adddf3>
 800429a:	3d01      	subs	r5, #1
 800429c:	e7ed      	b.n	800427a <__kernel_rem_pio2+0x5aa>
 800429e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80042a2:	f7fb ff9f 	bl	80001e4 <__adddf3>
 80042a6:	3c01      	subs	r4, #1
 80042a8:	e7c3      	b.n	8004232 <__kernel_rem_pio2+0x562>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	e7c8      	b.n	8004242 <__kernel_rem_pio2+0x572>
 80042b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80042b4:	f7fb ff96 	bl	80001e4 <__adddf3>
 80042b8:	3401      	adds	r4, #1
 80042ba:	e7cd      	b.n	8004258 <__kernel_rem_pio2+0x588>
 80042bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80042c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80042c4:	9b00      	ldr	r3, [sp, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	4632      	mov	r2, r6
 80042cc:	463b      	mov	r3, r7
 80042ce:	4640      	mov	r0, r8
 80042d0:	4649      	mov	r1, r9
 80042d2:	f7fb ff87 	bl	80001e4 <__adddf3>
 80042d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4640      	mov	r0, r8
 80042e0:	4649      	mov	r1, r9
 80042e2:	f7fb ff7d 	bl	80001e0 <__aeabi_dsub>
 80042e6:	4632      	mov	r2, r6
 80042e8:	463b      	mov	r3, r7
 80042ea:	f7fb ff7b 	bl	80001e4 <__adddf3>
 80042ee:	ed9d 7b06 	vldr	d7, [sp, #24]
 80042f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80042f6:	ed8a 7b00 	vstr	d7, [sl]
 80042fa:	e770      	b.n	80041de <__kernel_rem_pio2+0x50e>
 80042fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004300:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004304:	4640      	mov	r0, r8
 8004306:	4632      	mov	r2, r6
 8004308:	463b      	mov	r3, r7
 800430a:	4649      	mov	r1, r9
 800430c:	f7fb ff6a 	bl	80001e4 <__adddf3>
 8004310:	e9cd 0100 	strd	r0, r1, [sp]
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4640      	mov	r0, r8
 800431a:	4649      	mov	r1, r9
 800431c:	f7fb ff60 	bl	80001e0 <__aeabi_dsub>
 8004320:	4632      	mov	r2, r6
 8004322:	463b      	mov	r3, r7
 8004324:	f7fb ff5e 	bl	80001e4 <__adddf3>
 8004328:	ed9d 7b00 	vldr	d7, [sp]
 800432c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004330:	ed84 7b00 	vstr	d7, [r4]
 8004334:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004338:	e757      	b.n	80041ea <__kernel_rem_pio2+0x51a>
 800433a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800433e:	f7fb ff51 	bl	80001e4 <__adddf3>
 8004342:	3d01      	subs	r5, #1
 8004344:	e75c      	b.n	8004200 <__kernel_rem_pio2+0x530>
 8004346:	9b04      	ldr	r3, [sp, #16]
 8004348:	9a04      	ldr	r2, [sp, #16]
 800434a:	601f      	str	r7, [r3, #0]
 800434c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004350:	605c      	str	r4, [r3, #4]
 8004352:	609d      	str	r5, [r3, #8]
 8004354:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004358:	60d3      	str	r3, [r2, #12]
 800435a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800435e:	6110      	str	r0, [r2, #16]
 8004360:	6153      	str	r3, [r2, #20]
 8004362:	e727      	b.n	80041b4 <__kernel_rem_pio2+0x4e4>
 8004364:	41700000 	.word	0x41700000
 8004368:	3e700000 	.word	0x3e700000
 800436c:	00000000 	.word	0x00000000

08004370 <scalbn>:
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	ec55 4b10 	vmov	r4, r5, d0
 8004376:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800437a:	4606      	mov	r6, r0
 800437c:	462b      	mov	r3, r5
 800437e:	b999      	cbnz	r1, 80043a8 <scalbn+0x38>
 8004380:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004384:	4323      	orrs	r3, r4
 8004386:	d03f      	beq.n	8004408 <scalbn+0x98>
 8004388:	4b35      	ldr	r3, [pc, #212]	; (8004460 <scalbn+0xf0>)
 800438a:	4629      	mov	r1, r5
 800438c:	ee10 0a10 	vmov	r0, s0
 8004390:	2200      	movs	r2, #0
 8004392:	f7fc f8dd 	bl	8000550 <__aeabi_dmul>
 8004396:	4b33      	ldr	r3, [pc, #204]	; (8004464 <scalbn+0xf4>)
 8004398:	429e      	cmp	r6, r3
 800439a:	4604      	mov	r4, r0
 800439c:	460d      	mov	r5, r1
 800439e:	da10      	bge.n	80043c2 <scalbn+0x52>
 80043a0:	a327      	add	r3, pc, #156	; (adr r3, 8004440 <scalbn+0xd0>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	e01f      	b.n	80043e8 <scalbn+0x78>
 80043a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80043ac:	4291      	cmp	r1, r2
 80043ae:	d10c      	bne.n	80043ca <scalbn+0x5a>
 80043b0:	ee10 2a10 	vmov	r2, s0
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fb ff14 	bl	80001e4 <__adddf3>
 80043bc:	4604      	mov	r4, r0
 80043be:	460d      	mov	r5, r1
 80043c0:	e022      	b.n	8004408 <scalbn+0x98>
 80043c2:	460b      	mov	r3, r1
 80043c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80043c8:	3936      	subs	r1, #54	; 0x36
 80043ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80043ce:	4296      	cmp	r6, r2
 80043d0:	dd0d      	ble.n	80043ee <scalbn+0x7e>
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	a11c      	add	r1, pc, #112	; (adr r1, 8004448 <scalbn+0xd8>)
 80043d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043da:	da02      	bge.n	80043e2 <scalbn+0x72>
 80043dc:	a11c      	add	r1, pc, #112	; (adr r1, 8004450 <scalbn+0xe0>)
 80043de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043e2:	a319      	add	r3, pc, #100	; (adr r3, 8004448 <scalbn+0xd8>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fc f8b2 	bl	8000550 <__aeabi_dmul>
 80043ec:	e7e6      	b.n	80043bc <scalbn+0x4c>
 80043ee:	1872      	adds	r2, r6, r1
 80043f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80043f4:	428a      	cmp	r2, r1
 80043f6:	dcec      	bgt.n	80043d2 <scalbn+0x62>
 80043f8:	2a00      	cmp	r2, #0
 80043fa:	dd08      	ble.n	800440e <scalbn+0x9e>
 80043fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004404:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004408:	ec45 4b10 	vmov	d0, r4, r5
 800440c:	bd70      	pop	{r4, r5, r6, pc}
 800440e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004412:	da08      	bge.n	8004426 <scalbn+0xb6>
 8004414:	2d00      	cmp	r5, #0
 8004416:	a10a      	add	r1, pc, #40	; (adr r1, 8004440 <scalbn+0xd0>)
 8004418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800441c:	dac0      	bge.n	80043a0 <scalbn+0x30>
 800441e:	a10e      	add	r1, pc, #56	; (adr r1, 8004458 <scalbn+0xe8>)
 8004420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004424:	e7bc      	b.n	80043a0 <scalbn+0x30>
 8004426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800442a:	3236      	adds	r2, #54	; 0x36
 800442c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004430:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004434:	4620      	mov	r0, r4
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <scalbn+0xf8>)
 8004438:	2200      	movs	r2, #0
 800443a:	e7d5      	b.n	80043e8 <scalbn+0x78>
 800443c:	f3af 8000 	nop.w
 8004440:	c2f8f359 	.word	0xc2f8f359
 8004444:	01a56e1f 	.word	0x01a56e1f
 8004448:	8800759c 	.word	0x8800759c
 800444c:	7e37e43c 	.word	0x7e37e43c
 8004450:	8800759c 	.word	0x8800759c
 8004454:	fe37e43c 	.word	0xfe37e43c
 8004458:	c2f8f359 	.word	0xc2f8f359
 800445c:	81a56e1f 	.word	0x81a56e1f
 8004460:	43500000 	.word	0x43500000
 8004464:	ffff3cb0 	.word	0xffff3cb0
 8004468:	3c900000 	.word	0x3c900000
 800446c:	00000000 	.word	0x00000000

08004470 <floor>:
 8004470:	ec51 0b10 	vmov	r0, r1, d0
 8004474:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800447c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004480:	2e13      	cmp	r6, #19
 8004482:	ee10 5a10 	vmov	r5, s0
 8004486:	ee10 8a10 	vmov	r8, s0
 800448a:	460c      	mov	r4, r1
 800448c:	dc31      	bgt.n	80044f2 <floor+0x82>
 800448e:	2e00      	cmp	r6, #0
 8004490:	da14      	bge.n	80044bc <floor+0x4c>
 8004492:	a333      	add	r3, pc, #204	; (adr r3, 8004560 <floor+0xf0>)
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f7fb fea4 	bl	80001e4 <__adddf3>
 800449c:	2200      	movs	r2, #0
 800449e:	2300      	movs	r3, #0
 80044a0:	f7fc fae6 	bl	8000a70 <__aeabi_dcmpgt>
 80044a4:	b138      	cbz	r0, 80044b6 <floor+0x46>
 80044a6:	2c00      	cmp	r4, #0
 80044a8:	da53      	bge.n	8004552 <floor+0xe2>
 80044aa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80044ae:	4325      	orrs	r5, r4
 80044b0:	d052      	beq.n	8004558 <floor+0xe8>
 80044b2:	4c2d      	ldr	r4, [pc, #180]	; (8004568 <floor+0xf8>)
 80044b4:	2500      	movs	r5, #0
 80044b6:	4621      	mov	r1, r4
 80044b8:	4628      	mov	r0, r5
 80044ba:	e024      	b.n	8004506 <floor+0x96>
 80044bc:	4f2b      	ldr	r7, [pc, #172]	; (800456c <floor+0xfc>)
 80044be:	4137      	asrs	r7, r6
 80044c0:	ea01 0307 	and.w	r3, r1, r7
 80044c4:	4303      	orrs	r3, r0
 80044c6:	d01e      	beq.n	8004506 <floor+0x96>
 80044c8:	a325      	add	r3, pc, #148	; (adr r3, 8004560 <floor+0xf0>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fb fe89 	bl	80001e4 <__adddf3>
 80044d2:	2200      	movs	r2, #0
 80044d4:	2300      	movs	r3, #0
 80044d6:	f7fc facb 	bl	8000a70 <__aeabi_dcmpgt>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d0eb      	beq.n	80044b6 <floor+0x46>
 80044de:	2c00      	cmp	r4, #0
 80044e0:	bfbe      	ittt	lt
 80044e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80044e6:	4133      	asrlt	r3, r6
 80044e8:	18e4      	addlt	r4, r4, r3
 80044ea:	ea24 0407 	bic.w	r4, r4, r7
 80044ee:	2500      	movs	r5, #0
 80044f0:	e7e1      	b.n	80044b6 <floor+0x46>
 80044f2:	2e33      	cmp	r6, #51	; 0x33
 80044f4:	dd0b      	ble.n	800450e <floor+0x9e>
 80044f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80044fa:	d104      	bne.n	8004506 <floor+0x96>
 80044fc:	ee10 2a10 	vmov	r2, s0
 8004500:	460b      	mov	r3, r1
 8004502:	f7fb fe6f 	bl	80001e4 <__adddf3>
 8004506:	ec41 0b10 	vmov	d0, r0, r1
 800450a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800450e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8004512:	f04f 37ff 	mov.w	r7, #4294967295
 8004516:	40df      	lsrs	r7, r3
 8004518:	4238      	tst	r0, r7
 800451a:	d0f4      	beq.n	8004506 <floor+0x96>
 800451c:	a310      	add	r3, pc, #64	; (adr r3, 8004560 <floor+0xf0>)
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	f7fb fe5f 	bl	80001e4 <__adddf3>
 8004526:	2200      	movs	r2, #0
 8004528:	2300      	movs	r3, #0
 800452a:	f7fc faa1 	bl	8000a70 <__aeabi_dcmpgt>
 800452e:	2800      	cmp	r0, #0
 8004530:	d0c1      	beq.n	80044b6 <floor+0x46>
 8004532:	2c00      	cmp	r4, #0
 8004534:	da0a      	bge.n	800454c <floor+0xdc>
 8004536:	2e14      	cmp	r6, #20
 8004538:	d101      	bne.n	800453e <floor+0xce>
 800453a:	3401      	adds	r4, #1
 800453c:	e006      	b.n	800454c <floor+0xdc>
 800453e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004542:	2301      	movs	r3, #1
 8004544:	40b3      	lsls	r3, r6
 8004546:	441d      	add	r5, r3
 8004548:	45a8      	cmp	r8, r5
 800454a:	d8f6      	bhi.n	800453a <floor+0xca>
 800454c:	ea25 0507 	bic.w	r5, r5, r7
 8004550:	e7b1      	b.n	80044b6 <floor+0x46>
 8004552:	2500      	movs	r5, #0
 8004554:	462c      	mov	r4, r5
 8004556:	e7ae      	b.n	80044b6 <floor+0x46>
 8004558:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800455c:	e7ab      	b.n	80044b6 <floor+0x46>
 800455e:	bf00      	nop
 8004560:	8800759c 	.word	0x8800759c
 8004564:	7e37e43c 	.word	0x7e37e43c
 8004568:	bff00000 	.word	0xbff00000
 800456c:	000fffff 	.word	0x000fffff

08004570 <_init>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr

0800457c <_fini>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr
